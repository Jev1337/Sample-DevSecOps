// Enhanced Alloy configuration for SIEM log processing
// This configuration handles various log formats and ensures proper field extraction

// Kubernetes pod discovery for API events
discovery.kubernetes "pods" {
	role = "pod"
}

discovery.relabel "kubernetes_pods" {
	targets = discovery.kubernetes.pods.targets
	rule {
		source_labels = ["__meta_kubernetes_pod_phase"]
		regex = "Pending|Succeeded|Failed|Completed"
		action = "drop"
	}
	rule {
		source_labels = ["__meta_kubernetes_pod_name"]
		target_label = "pod"
	}
	rule {
		source_labels = ["__meta_kubernetes_namespace"]
		target_label = "namespace"
	}
	rule {
		source_labels = ["__meta_kubernetes_pod_container_name"]
		target_label = "container"
	}
}

// Kubernetes pod logs collection
loki.source.kubernetes "pods" {
	targets    = discovery.relabel.kubernetes_pods.output
	forward_to = [loki.process.k8s_api_logs.receiver]
}



// Process Kubernetes API logs
loki.process "k8s_api_logs" {
	forward_to = [loki.write.default.receiver]
	
	// Add Kubernetes-specific labels
	stage.labels {
		values = {
			job = "loki.source.kubernetes.pods",
			event_type = "k8s_event",
			log_source = "kubernetes",
		}
	}
	
	// Process security-related Kubernetes events
	stage.match {
		selector = "{job=\"loki.source.kubernetes.pods\"}"
		
		// Mark error events
		stage.match {
			selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(error|fail|exception|panic|fatal)\""
			stage.regex {
				expression = ".*(?P<error_type>error|fail|exception|panic|fatal).*"
			}
			stage.labels {
				values = {
					level = "error",
					event_type = "k8s_error",
					security_level = "high",
				}
			}
		}
		
		// Mark access denied events
		stage.match {
			selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(denied|unauthorized|forbidden)\""
			stage.regex {
				expression = ".*(?P<access_issue>denied|unauthorized|forbidden).*"
			}
			stage.labels {
				values = {
					level = "warning",
					event_type = "k8s_access_denied",
					security_level = "medium",
				}
			}
		}
		
		// Mark container restart/crash events
		stage.match {
			selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(restart|crash|killed|oom|exit|terminated)\""
			stage.regex {
				expression = ".*(?P<container_issue>restart|crash|killed|oom|exit|terminated).*"
			}
			stage.labels {
				values = {
					level = "warning",
					event_type = "k8s_container_issue",
					security_level = "medium",
				}
			}
		}
		
		// Mark API access patterns
		stage.match {
			selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(get|post|put|delete|patch).*(/api/|/apis/)\""
			stage.regex {
				expression = ".*(?P<method>GET|POST|PUT|DELETE|PATCH).*(?P<api_path>/api[^\\s]*)"
			}
			stage.labels {
				values = {
					level = "info",
					event_type = "k8s_api_access",
					security_level = "low",
				}
			}
		}
	}
}



// Docker container log collection
discovery.docker "containers" {
	host = "unix:///var/run/docker.sock"
	refresh_interval = "5s"
}

discovery.relabel "docker_containers" {
	targets = discovery.docker.containers.targets
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		regex = "(webhook|flask-app|jenkins|sonarqube).*"
		action = "keep"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "container"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "job"
		regex = "webhook.*"
		replacement = "webhook-receiver"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "job"
		regex = "flask-app.*"
		replacement = "flask-app"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "job"
		regex = "jenkins.*"
		replacement = "jenkins"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "job"
		regex = "sonarqube.*"
		replacement = "sonarqube"
	}
}

loki.source.docker "containers" {
	host = "unix:///var/run/docker.sock"
	targets = discovery.relabel.docker_containers.output
	forward_to = [loki.process.docker_logs.receiver]
	refresh_interval = "5s"
}

loki.process "docker_logs" {
	forward_to = [loki.write.default.receiver]
	
	// Parse JSON logs from applications
	stage.json {
		expressions = {
			timestamp = "timestamp",
			level = "level", 
			message = "message",
			event_type = "event_type",
			source_ip = "source_ip",
			method = "method",
			status_code = "status_code",
		}
	}
	
	// Add labels for Docker logs
	stage.labels {
		values = {
			environment = "docker",
			service_name = "",
			detected_level = "info",
		}
	}
}

// Send all logs to Loki
loki.write "default" {
	endpoint {
		url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
	}
	
	// Add external labels
	external_labels = {
		cluster = "devsecops-demo",
		environment = "production",
	}
}
