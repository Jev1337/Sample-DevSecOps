// Enhanced Alloy configuration for SIEM log processing
// This configuration handles various log formats and ensures proper field extraction

// Kubernetes pod discovery for API events
discovery.kubernetes "pods" {
	role = "pod"
}

discovery.relabel "kubernetes_pods" {
	targets = discovery.kubernetes.pods.targets
	rule {
		source_labels = ["__meta_kubernetes_pod_phase"]
		regex = "Pending|Succeeded|Failed|Completed"
		action = "drop"
	}
	rule {
		source_labels = ["__meta_kubernetes_pod_name"]
		target_label = "pod"
	}
	rule {
		source_labels = ["__meta_kubernetes_namespace"]
		target_label = "namespace"
	}
	rule {
		source_labels = ["__meta_kubernetes_pod_container_name"]
		target_label = "container"
	}
}

// Kubernetes pod logs collection
loki.source.kubernetes "pods" {
	targets    = discovery.relabel.kubernetes_pods.output
	forward_to = [loki.process.k8s_api_logs.receiver]
}

// File-based log collection for SIEM sample data
loki.source.file "siem_sample_logs" {
	targets = [
		{__path__ = "/var/log/auth.log", job = "system-auth", log_type = "auth"},
		{__path__ = "/var/log/secure", job = "system-auth", log_type = "auth"},
		{__path__ = "/var/log/audit/audit.log", job = "system-audit", log_type = "system_audit"},
		{__path__ = "/var/log/webhook.log", job = "webhook-receiver", log_type = "webhook"},
		{__path__ = "/var/log/dpkg.log", job = "package-install", log_type = "package"},
		{__path__ = "/var/log/siem-monitor.log", job = "siem-monitor", log_type = "siem"},
		{__path__ = "/var/log/jenkins/*.log", job = "jenkins-logs", log_type = "jenkins"},
		{__path__ = "/var/log/sonarqube/*.log", job = "sonarqube-logs", log_type = "sonarqube"},
	]
	forward_to = [loki.process.siem_logs.receiver]
}

// Process Kubernetes API logs
loki.process "k8s_api_logs" {
	forward_to = [loki.write.default.receiver]
	
	// Add Kubernetes-specific labels
	stage.labels {
		values = {
			job = "loki.source.kubernetes.pods",
			event_type = "k8s_event",
			log_source = "kubernetes",
		}
	}
	
	// Process security-related Kubernetes events
	stage.match {
		selector = "{job=\"loki.source.kubernetes.pods\"}"
		
		// Mark error events
		stage.match {
			selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(error|fail|exception|panic|fatal)\""
			stage.regex {
				expression = ".*(?P<error_type>error|fail|exception|panic|fatal).*"
			}
			stage.labels {
				values = {
					level = "error",
					event_type = "k8s_error",
					security_level = "high",
				}
			}
		}
		
		// Mark access denied events
		stage.match {
			selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(denied|unauthorized|forbidden)\""
			stage.regex {
				expression = ".*(?P<access_issue>denied|unauthorized|forbidden).*"
			}
			stage.labels {
				values = {
					level = "warning",
					event_type = "k8s_access_denied",
					security_level = "medium",
				}
			}
		}
		
		// Mark container restart/crash events
		stage.match {
			selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(restart|crash|killed|oom|exit|terminated)\""
			stage.regex {
				expression = ".*(?P<container_issue>restart|crash|killed|oom|exit|terminated).*"
			}
			stage.labels {
				values = {
					level = "warning",
					event_type = "k8s_container_issue",
					security_level = "medium",
				}
			}
		}
		
		// Mark API access patterns
		stage.match {
			selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(get|post|put|delete|patch).*(/api/|/apis/)\""
			stage.regex {
				expression = ".*(?P<method>GET|POST|PUT|DELETE|PATCH).*(?P<api_path>/api[^\\s]*)"
			}
			stage.labels {
				values = {
					level = "info",
					event_type = "k8s_api_access",
					security_level = "low",
				}
			}
		}
	}
}

// Main SIEM log processing pipeline
loki.process "siem_logs" {
	forward_to = [loki.write.default.receiver]
	
	// Route processing based on job type
	stage.match {
		selector = "{job=\"system-auth\"}"
		pipeline_name = "auth_logs"
		
		// Parse authentication log format
		stage.regex {
			expression = "(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\S+)\\s+(?P<service>\\S+)\\[?(?P<pid>\\d+)?\\]?:\\s*(?P<message>.*)"
		}
		
		// Extract failed login details
		stage.match {
			selector = "{job=\"system-auth\"} |~ \"(?i)(failed password|authentication failure|invalid user)\""
			pipeline_name = "failed_auth"
			
			stage.regex {
				expression = ".*(?i)(failed password|authentication failure).*\\s+(?P<username>\\S+)\\s+from\\s+(?P<source_ip>[0-9.]+)"
				source = "message"
			}
			
			stage.regex {
				expression = ".*(?i)invalid user\\s+(?P<username>\\S+)\\s+from\\s+(?P<source_ip>[0-9.]+)"
				source = "message"
			}
			
			stage.labels {
				values = {
					level = "warning",
					event_type = "auth_failure",
					detected_level = "warning",
				}
			}
		}
		
		// Extract successful login details
		stage.match {
			selector = "{job=\"system-auth\"} |~ \"(?i)(accepted|successful)\""
			pipeline_name = "successful_auth"
			
			stage.regex {
				expression = ".*(?i)(accepted|successful).*\\s+(?P<username>\\S+)\\s+from\\s+(?P<source_ip>[0-9.]+)"
				source = "message"
			}
			
			stage.labels {
				values = {
					level = "info",
					event_type = "auth_success",
					detected_level = "info",
				}
			}
		}
		
		stage.labels {
			values = {
				job = "system-auth",
				service = "",
				level = "info",
				service_name = "system-auth",
			}
		}
	}
	
	// Process system audit logs
	stage.match {
		selector = "{job=\"system-audit\"}"
		pipeline_name = "system_audit"
		
		// Parse audit log format
		stage.regex {
			expression = "^type=(?P<audit_type>\\S+) msg=audit\\((?P<audit_timestamp>[^)]+)\\): (?P<audit_message>.*)"
		}
		
		// Extract user information from audit messages
		stage.regex {
			expression = ".*UID=\"(?P<uid>[^\"]+)\".*AUID=\"(?P<auid>[^\"]+)\""
			source = "audit_message"
		}
		
		stage.labels {
			values = {
				job = "system-audit",
				audit_type = "",
				level = "info",
				service_name = "system-audit",
			}
		}
	}
	
	// Process package installation logs
	stage.match {
		selector = "{job=\"package-install\"}"
		pipeline_name = "package_logs"
		
		stage.regex {
			expression = ".*status (?P<action>\\S+) (?P<package>[^:]+):"
		}
		
		stage.labels {
			values = {
				job = "package-install",
				level = "info",
				service_name = "package-install",
			}
		}
	}
	
	// Process SIEM monitor logs
	stage.match {
		selector = "{job=\"siem-monitor\"}"
		pipeline_name = "siem_monitor_logs"
		
		stage.labels {
			values = {
				job = "siem-monitor",
				level = "info",
				service_name = "siem-monitor",
			}
		}
	}
	
	// Process Jenkins logs
	stage.match {
		selector = "{job=\"jenkins-logs\"}"
		pipeline_name = "jenkins_logs"
		
		// Parse Jenkins log format
		stage.regex {
			expression = "(?P<timestamp>\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}\\.\\d+)\\s+\\[(?P<thread>[^\\]]+)\\]\\s+(?P<level>\\S+)\\s+(?P<logger>\\S+)\\s+-\\s+(?P<message>.*)"
		}
		
		// Mark build events
		stage.match {
			selector = "{job=\"jenkins-logs\"} |~ \"(?i)(build|job|pipeline|started|finished|success|fail|error|complete)\""
			stage.regex {
				expression = ".*(?P<build_event>build|job|pipeline|started|finished|success|fail|error|complete).*"
				source = "message"
			}
			stage.labels {
				values = {
					event_type = "jenkins_build",
					detected_level = "info",
				}
			}
		}
		
		// Mark failed builds
		stage.match {
			selector = "{job=\"jenkins-logs\"} |~ \"(?i)(fail|error|exception|abort)\""
			stage.labels {
				values = {
					level = "error",
					event_type = "jenkins_failure",
					detected_level = "error",
				}
			}
		}
		
		stage.labels {
			values = {
				job = "jenkins-logs",
				level = "info",
				service_name = "jenkins",
			}
		}
	}
	
	// Process SonarQube logs
	stage.match {
		selector = "{job=\"sonarqube-logs\"}"
		pipeline_name = "sonarqube_logs"
		
		// Parse SonarQube log format
		stage.regex {
			expression = "(?P<timestamp>\\d{4}\\.\\d{2}\\.\\d{2}\\s+\\d{2}:\\d{2}:\\d{2})\\s+(?P<level>\\S+)\\s+(?P<component>\\S+)\\s+\\[(?P<thread>[^\\]]+)\\]\\s+(?P<message>.*)"
		}
		
		// Mark analysis events
		stage.match {
			selector = "{job=\"sonarqube-logs\"} |~ \"(?i)(analysis|scan|quality|gate|bug|vulnerability|smell|coverage)\""
			stage.regex {
				expression = ".*(?P<analysis_event>analysis|scan|quality|gate|bug|vulnerability|smell|coverage).*"
				source = "message"
			}
			stage.labels {
				values = {
					event_type = "sonarqube_analysis",
					detected_level = "info",
				}
			}
		}
		
		// Mark quality gate failures
		stage.match {
			selector = "{job=\"sonarqube-logs\"} |~ \"(?i)(quality gate.*fail|failed|error)\""
			stage.labels {
				values = {
					level = "warning",
					event_type = "sonarqube_quality_gate_fail",
					detected_level = "warning",
				}
			}
		}
		
		stage.labels {
			values = {
				job = "sonarqube-logs",
				level = "info",
				service_name = "sonarqube",
			}
		}
	}
	
	// Process Kubernetes audit logs (if available)
	stage.match {
		selector = "{job=\"kubernetes-audit\"}"
		pipeline_name = "k8s_audit"
		
		// First try to parse as JSON
		stage.json {
			expressions = {
				kind = "kind",
				apiVersion = "apiVersion",
				level = "level",
				auditID = "auditID",
				stage = "stage",
				requestURI = "requestURI",
				verb = "verb",
				user_json = "user",
				sourceIPs = "sourceIPs[0]",
				userAgent = "userAgent",
				objectRef_resource = "objectRef.resource",
				objectRef_namespace = "objectRef.namespace",
				objectRef_apiVersion = "objectRef.apiVersion",
				responseStatus_code = "responseStatus.code",
				requestReceivedTimestamp = "requestReceivedTimestamp",
				stageTimestamp = "stageTimestamp",
			}
		}
		
		// Extract username from user object (handle both object and string cases)
		stage.match {
			selector = "{job=\"kubernetes-audit\"}"
			pipeline_name = "extract_username"
			
			// Try to parse user as JSON object
			stage.json {
				source = "user_json"
				expressions = {
					user_username = "username",
					user_groups = "groups",
				}
			}
			
			// Fallback: extract username from string representation
			stage.regex {
				expression = ".*\"username\":\\s*\"([^\"]+)\""
				source = "__line__"
			}
			
			stage.template {
				source = "user_username"
				template = "{{if .user_username}}{{.user_username}}{{else}}{{if .user_json}}system:serviceaccount{{else}}system:unknown{{end}}{{end}}"
			}
		}
		
		// Mark suspicious activities
		stage.match {
			selector = "{job=\"kubernetes-audit\"} |~ \".*403.*\""
			pipeline_name = "mark_access_denied"
			
			stage.labels {
				values = {
					level = "warning",
					event_type = "access_denied",
					detected_level = "warning",
				}
			}
		}
		
		// Mark anonymous access
		stage.match {
			selector = "{job=\"kubernetes-audit\"} |~ \".*system:anonymous.*\""
			pipeline_name = "mark_anonymous"
			
			stage.labels {
				values = {
					level = "warning",
					event_type = "anonymous_access",
					detected_level = "warning",
				}
			}
		}
		
		// Extract levels based on response codes
		stage.match {
			selector = "{job=\"kubernetes-audit\"} |~ \".*200.*\""
			pipeline_name = "success_response"
			
			stage.labels {
				values = {
					level = "info",
					detected_level = "info",
				}
			}
		}
		
		stage.match {
			selector = "{job=\"kubernetes-audit\"} |~ \".*40[0-9].*\""
			pipeline_name = "client_error"
			
			stage.labels {
				values = {
					level = "warning",
					detected_level = "warning",
				}
			}
		}
		
		stage.match {
			selector = "{job=\"kubernetes-audit\"} |~ \".*50[0-9].*\""
			pipeline_name = "server_error"
			
			stage.labels {
				values = {
					level = "error",
					detected_level = "error",
				}
			}
		}
		
		stage.labels {
			values = {
				job = "kubernetes-audit",
				verb = "",
				resource = "",
				level = "info",
				service_name = "kubernetes-audit",
			}
		}
	}
	
	// Process webhook logs
	stage.match {
		selector = "{job=\"webhook-receiver\"}"
		pipeline_name = "webhook_logs"
		
		// Parse webhook log format
		stage.regex {
			expression = "(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2})\\s+(?P<event_type>\\S+)\\s+(?P<action>\\S+)\\s+from\\s+(?P<source_ip>[0-9.]+)"
		}
		
		stage.labels {
			values = {
				job = "webhook-receiver",
				level = "info",
				service_name = "webhook-receiver",
				detected_level = "info",
			}
		}
	}
	
	// Global error handling - prevent template format errors
	stage.match {
		selector = "{job=~\".*\"}"
		pipeline_name = "error_prevention"
		
		// Ensure all required fields have default values
		stage.template {
			source = "user_username"
			template = "{{if .user_username}}{{.user_username}}{{else}}system:unknown{{end}}"
		}
		
		stage.template {
			source = "verb"
			template = "{{if .verb}}{{.verb}}{{else}}unknown{{end}}"
		}
		
		stage.template {
			source = "objectRef_resource"
			template = "{{if .objectRef_resource}}{{.objectRef_resource}}{{else}}unknown{{end}}"
		}
		
		stage.template {
			source = "responseStatus_code"
			template = "{{if .responseStatus_code}}{{.responseStatus_code}}{{else}}0{{end}}"
		}
	}
	
	// Add common labels for all logs
	stage.labels {
		values = {
			environment = "production",
			log_type = "",
		}
	}
}

// Docker container log collection
discovery.docker "containers" {
	host = "unix:///var/run/docker.sock"
	refresh_interval = "5s"
}

discovery.relabel "docker_containers" {
	targets = discovery.docker.containers.targets
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		regex = "(webhook|flask-app|jenkins|sonarqube).*"
		action = "keep"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "container"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "job"
		regex = "webhook.*"
		replacement = "webhook-receiver"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "job"
		regex = "flask-app.*"
		replacement = "flask-app"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "job"
		regex = "jenkins.*"
		replacement = "jenkins"
	}
	
	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label = "job"
		regex = "sonarqube.*"
		replacement = "sonarqube"
	}
}

loki.source.docker "containers" {
	host = "unix:///var/run/docker.sock"
	targets = discovery.relabel.docker_containers.output
	forward_to = [loki.process.docker_logs.receiver]
	refresh_interval = "5s"
}

loki.process "docker_logs" {
	forward_to = [loki.write.default.receiver]
	
	// Parse JSON logs from applications
	stage.json {
		expressions = {
			timestamp = "timestamp",
			level = "level", 
			message = "message",
			event_type = "event_type",
			source_ip = "source_ip",
			method = "method",
			status_code = "status_code",
		}
	}
	
	// Process Jenkins container logs
	stage.match {
		selector = "{job=\"jenkins\"}"
		pipeline_name = "jenkins_container_logs"
		
		// Mark build-related events
		stage.match {
			selector = "{job=\"jenkins\"} |~ \"(?i)(build|job|pipeline|started|finished|success|fail|error|complete)\""
			stage.labels {
				values = {
					event_type = "jenkins_build_event",
					detected_level = "info",
				}
			}
		}
		
		// Mark security-related events
		stage.match {
			selector = "{job=\"jenkins\"} |~ \"(?i)(login|logout|authentication|authorization|security|user)\""
			stage.labels {
				values = {
					event_type = "jenkins_security_event",
					detected_level = "info",
				}
			}
		}
		
		// Mark errors and failures
		stage.match {
			selector = "{job=\"jenkins\"} |~ \"(?i)(error|exception|fail|abort|timeout)\""
			stage.labels {
				values = {
					level = "error",
					event_type = "jenkins_error",
					detected_level = "error",
				}
			}
		}
	}
	
	// Process SonarQube container logs
	stage.match {
		selector = "{job=\"sonarqube\"}"
		pipeline_name = "sonarqube_container_logs"
		
		// Mark analysis events
		stage.match {
			selector = "{job=\"sonarqube\"} |~ \"(?i)(analysis|scan|quality|gate|bug|vulnerability|smell|coverage)\""
			stage.labels {
				values = {
					event_type = "sonarqube_analysis_event",
					detected_level = "info",
				}
			}
		}
		
		// Mark quality gate events
		stage.match {
			selector = "{job=\"sonarqube\"} |~ \"(?i)(quality gate)\""
			stage.labels {
				values = {
					event_type = "sonarqube_quality_gate",
					detected_level = "info",
				}
			}
		}
		
		// Mark errors
		stage.match {
			selector = "{job=\"sonarqube\"} |~ \"(?i)(error|exception|fail)\""
			stage.labels {
				values = {
					level = "error",
					event_type = "sonarqube_error",
					detected_level = "error",
				}
			}
		}
	}
	
	// Process Flask app logs
	stage.match {
		selector = "{job=\"flask-app\"}"
		pipeline_name = "flask_app_logs"
		
		// Mark HTTP requests
		stage.match {
			selector = "{job=\"flask-app\"} |~ \"(?i)(get|post|put|delete|patch)\""
			stage.regex {
				expression = ".*(?P<method>GET|POST|PUT|DELETE|PATCH).*(?P<status_code>[0-9]{3}).*"
			}
			stage.labels {
				values = {
					event_type = "flask_http_request",
					detected_level = "info",
				}
			}
		}
		
		// Mark errors
		stage.match {
			selector = "{job=\"flask-app\"} |~ \"(?i)(error|exception|fail|40[0-9]|50[0-9])\""
			stage.labels {
				values = {
					level = "error",
					event_type = "flask_error",
					detected_level = "error",
				}
			}
		}
	}
	
	// Add labels for Docker logs
	stage.labels {
		values = {
			environment = "docker",
			service_name = "",
			detected_level = "info",
		}
	}
}

// Send all logs to Loki
loki.write "default" {
	endpoint {
		url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
	}
	
	// Add external labels
	external_labels = {
		cluster = "devsecops-demo",
		environment = "production",
	}
}
