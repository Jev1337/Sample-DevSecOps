# Falco Configuration for Runtime Security Detection
falco:
  grpc:
    enabled: true
    bind_address: "0.0.0.0:5060"
    threadiness: 8

  grpc_output:
    enabled: true

  json_output: true
  json_include_output_property: true
  json_include_tags_property: true

  log_stderr: true
  log_syslog: false
  log_level: info

  priority: info
  
  # Enable syscall monitoring
  syscall_event_drops:
    actions:
      - log
      - alert
    rate: 0.1
    max_burst: 1000

  # Custom rules for DevSecOps environment
  rules_file:
    - /etc/falco/falco_rules.yaml
    - /etc/falco/falco_rules.local.yaml
    - /etc/falco/k8s_audit_rules.yaml
    - /etc/falco/rules.d

# Driver configuration
driver:
  enabled: true
  kind: ebpf

# Service configuration
services:
  - name: grpc
    type: ClusterIP
    ports:
      - port: 5060
        protocol: TCP
        name: grpc

# RBAC configuration
rbac:
  create: true

serviceAccount:
  create: true
  name: falco

# Security context
securityContext:
  privileged: true
  runAsUser: 0

# Resource configuration
resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 1000m
    memory: 1Gi

# Node selector and tolerations
nodeSelector: {}
tolerations:
  - operator: Exists
    effect: NoSchedule

# Custom rules configuration
customRules:
  rules-siem.yaml: |-
    # Custom SIEM rules for DevSecOps environment
    
    # Container Security Rules
    - rule: Container Drift Detection
      desc: Detect when a binary is run in a container that is not in the baseline
      condition: spawned_process and container and not proc.exe_writable and not allowed_containers
      output: >
        Unexpected binary executed in container (user=%user.name container_id=%container.id
        container_name=%container.name image=%container.image.repository:%container.image.tag
        command=%proc.cmdline pid=%proc.pid parent=%proc.pparent)
      priority: WARNING
      tags: [container, drift, security]

    # Privilege Escalation Detection
    - rule: Privilege Escalation via setuid
      desc: Detect privilege escalation via setuid programs
      condition: spawned_process and proc.name in (sudo, su, passwd, newgrp) and user.uid != 0
      output: >
        Privilege escalation attempt detected (user=%user.name command=%proc.cmdline
        container=%container.name image=%container.image.repository pid=%proc.pid)
      priority: HIGH
      tags: [privilege_escalation, security]

    # Network Security Rules
    - rule: Unexpected Network Activity
      desc: Detect unexpected network connections from containers
      condition: inbound_connection and container and not allowed_inbound_ports
      output: >
        Unexpected inbound connection (user=%user.name connection=%fd.name
        container=%container.name image=%container.image.repository pid=%proc.pid)
      priority: WARNING
      tags: [network, security]

    # File System Security
    - rule: Sensitive File Access
      desc: Monitor access to sensitive files
      condition: open_read and sensitive_files and not proc.name in (allowed_readers)
      output: >
        Sensitive file accessed (user=%user.name file=%fd.name container=%container.name
        image=%container.image.repository command=%proc.cmdline pid=%proc.pid)
      priority: HIGH
      tags: [filesystem, security]

    # Package Management Monitoring
    - rule: Package Manager Usage
      desc: Monitor package manager usage in containers
      condition: spawned_process and proc.name in (apt, apt-get, yum, rpm, dpkg, pip, npm)
      output: >
        Package manager used in container (user=%user.name command=%proc.cmdline
        container=%container.name image=%container.image.repository pid=%proc.pid)
      priority: INFO
      tags: [package_manager, security]

    # Container Runtime Security
    - rule: Container Escape Attempt
      desc: Detect potential container escape attempts
      condition: >
        spawned_process and container and
        (proc.name in (docker, kubectl, crictl, runc) or
         proc.cmdline contains "/var/run/docker.sock" or
         proc.cmdline contains "nsenter" or
         proc.cmdline contains "chroot")
      output: >
        Potential container escape attempt (user=%user.name command=%proc.cmdline
        container=%container.name image=%container.image.repository pid=%proc.pid)
      priority: CRITICAL
      tags: [container_escape, security]

# Lists configuration
macros:
  allowed_containers: >
    (container.image.repository startswith "jenkins" or
     container.image.repository startswith "sonarqube" or
     container.image.repository startswith "grafana" or
     container.image.repository startswith "loki" or
     container.image.repository startswith "flask")

  allowed_inbound_ports: >
    (fd.sport in (80, 443, 8080, 9000, 3000, 3100, 5000))

  sensitive_files: >
    (fd.filename in (/etc/passwd, /etc/shadow, /etc/ssh/sshd_config,
     /etc/kubernetes, /var/run/secrets, /var/run/docker.sock))

  allowed_readers: >
    (proc.name in (cat, grep, less, more, tail, head, vi, vim, nano))

# Falco sidekick configuration for log forwarding
falcosidekick:
  enabled: true
  replicas: 1
  
  config:
    loki:
      hostport: "http://loki.monitoring.svc.cluster.local:3100"
      tenant: ""
      endpoint: "/loki/api/v1/push"
      minimumpriority: "info"
      extralabels: "falco_rule"
      customHeaders: ""
    
    webhook:
      address: "http://webhook.monitoring.svc.cluster.local:5000/webhook"
      minimumpriority: "warning"
    
    customfields: "source:falco,environment:devsecops"

  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Enable Prometheus metrics
metrics:
  enabled: true
  interval: 1h

# K8s audit log configuration
k8sAudit:
  enabled: true

# Container image scanning integration
certs:
  server:
    create: true
  client:
    create: true
