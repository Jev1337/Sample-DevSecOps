alloy:
  configMap:
    create: true
    content: |
      // Kubernetes pod discovery
      discovery.kubernetes "pods" {
        role = "pod"
      }

      // Pod log collection with security filtering
      discovery.relabel "kubernetes_pods" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          regex = "Pending|Succeeded|Failed|Completed"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app"]
          target_label = "app"
        }
      }

      // Host log discovery for security logs
      discovery.file "security_logs" {
        targets = [
          {
            __path__ = "/host/var/log/security/*.log",
            job = "security-logs",
            host = env("HOSTNAME"),
          },
          {
            __path__ = "/host/var/log/audit/audit.log",
            job = "audit-logs", 
            host = env("HOSTNAME"),
          },
          {
            __path__ = "/host/var/log/auth.log",
            job = "auth-logs",
            host = env("HOSTNAME"),
          },
          {
            __path__ = "/host/var/log/fail2ban.log",
            job = "fail2ban-logs",
            host = env("HOSTNAME"),
          },
          {
            __path__ = "/host/var/log/dpkg.log",
            job = "package-logs",
            host = env("HOSTNAME"),
          },
        ]
      }

      // Kubernetes logs processing
      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.kubernetes_pods.output
        forward_to = [loki.process.security_enrichment.receiver]
      }

      // Host security logs processing
      loki.source.file "security_logs" {
        targets    = discovery.file.security_logs.targets
        forward_to = [loki.process.security_enrichment.receiver]
      }

      // Security log processing and enrichment
      loki.process "security_enrichment" {
        stage.json {
          expressions = {
            timestamp = "timestamp",
            level = "level",
            message = "message",
          }
        }

        stage.regex {
          expression = "authentication failure.*from (?P<src_ip>[0-9.]+)"
          source = "message"
        }

        stage.regex {
          expression = "Failed password for (?P<user>\\w+) from (?P<src_ip>[0-9.]+)"
          source = "message"
        }

        stage.regex {
          expression = "sudo.*USER=(?P<sudo_user>\\w+).*COMMAND=(?P<command>.*)"
          source = "message"
        }

        stage.regex {
          expression = "Ban (?P<banned_ip>[0-9.]+)"
          source = "message"
        }

        stage.labels {
          values = {
            src_ip = "",
            user = "",
            sudo_user = "",
            command = "",
            banned_ip = "",
            security_event = "",
          }
        }

        // Mark security events
        stage.match {
          selector = '{job="auth-logs"}'
          stage.template {
            source = "security_event"
            template = "auth_event"
          }
        }

        stage.match {
          selector = '{job="audit-logs"}'
          stage.template {
            source = "security_event"
            template = "audit_event"
          }
        }

        stage.match {
          selector = '{job="fail2ban-logs"}'
          stage.template {
            source = "security_event"
            template = "intrusion_prevention"
          }
        }

        stage.match {
          selector = '{job="package-logs"}'
          stage.template {
            source = "security_event"
            template = "package_management"
          }
        }

        stage.match {
          selector = '{job="security-logs"}'
          stage.template {
            source = "security_event"
            template = "security_custom"
          }
        }

        forward_to = [loki.write.default.receiver]
      }

      // Write to Loki
      loki.write "default" {
        endpoint {
          url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
        }
      }

  # Enable privileged mode for host log access
  securityContext:
    privileged: true
    runAsUser: 0

  # Mount host volumes for log access
  extraVolumes:
    - name: var-log
      hostPath:
        path: /var/log
    - name: var-log-security
      hostPath:
        path: /var/log/security

  extraVolumeMounts:
    - name: var-log
      mountPath: /host/var/log
      readOnly: true
    - name: var-log-security
      mountPath: /host/var/log/security
      readOnly: true

  # Resource limits
  resources:
    limits:
      memory: 512Mi
      cpu: 500m
    requests:
      memory: 256Mi
      cpu: 200m

  # Node tolerations for security monitoring
  tolerations:
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule
    - operator: "Exists"
      effect: "NoExecute"
    - operator: "Exists"
      effect: "NoSchedule"
