alloy:
  configMap:
    create: true
    content: |
      discovery.kubernetes "pods" {
        role = "pod"
      }

      discovery.relabel "kubernetes_pods" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          regex = "Pending|Succeeded|Failed|Completed"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
          regex = "false"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          regex = ""
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
      }

      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.kubernetes_pods.output
        forward_to = [loki.process.k8s_logs.receiver]
      }

      // Process Kubernetes pod logs for security events
      loki.process "k8s_logs" {
        stage.labels {
          values = {
            job = "kubernetes-pods",
          }
        }
        
        // Look for security-related patterns in pod logs
        stage.regex {
          expression = "(?i).*(error|warn|fail|denied|unauthorized|forbidden|exception|panic|fatal).*"
          source = ""
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Real system authentication logs for SIEM dashboard
      local.file_match "system_logs" {
        path_targets = [
          {__path__ = "/var/log/auth.log", job = "system-auth"},
          {__path__ = "/var/log/syslog", job = "system-syslog"},
        ]
      }

      loki.source.file "system_logs" {
        targets    = local.file_match.system_logs.targets
        forward_to = [loki.process.system_logs.receiver]
      }

      // Real system audit logs for SIEM dashboard  
      local.file_match "audit_logs" {
        path_targets = [
          {__path__ = "/var/log/audit/*.log", job = "system-audit"},
          {__path__ = "/var/log/audit-k8s.log", job = "kubernetes-audit"},
        ]
      }

      loki.source.file "audit_logs" {
        targets    = local.file_match.audit_logs.targets
        forward_to = [loki.process.audit_logs.receiver]
      }

      // Process real system authentication logs
      loki.process "system_logs" {
        stage.regex {
          expression = "^(?P<timestamp>\\S+ \\S+) (?P<hostname>\\S+) (?P<program>\\S+)(\\[(?P<pid>\\d+)\\])?: (?P<message>.*)"
          source = ""
        }
        
        stage.timestamp {
          source = "timestamp"
          format = "Jan 02 15:04:05"
        }
        
        stage.labels {
          values = {
            hostname = "",
            program = "",
            job = "",
          }
        }
        
        // Filter for security-related events
        stage.match {
          selector = "{job=\"system-auth\"}"
          stage.regex {
            expression = "(?i).*(ssh|sudo|su|failed|error|denied|unauthorized|forbidden|authentication|login|logout|session).*"
            source = "message"
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Process real system audit logs
      loki.process "audit_logs" {
        // Handle traditional audit logs
        stage.match {
          selector = "{job=\"system-audit\"}"
          stage.regex {
            expression = "^type=(?P<audit_type>\\S+) msg=audit\\((?P<audit_timestamp>[^)]+)\\): (?P<audit_message>.*)"
            source = ""
          }
          
          stage.labels {
            values = {
              audit_type = "",
              job = "system-audit",
            }
          }
        }
        
        // Handle Kubernetes audit logs (JSON format)
        stage.match {
          selector = "{job=\"kubernetes-audit\"}"
          stage.json {
            expressions = {
              kind = "kind",
              verb = "verb",
              user = "user.username",
              resource = "objectRef.resource",
              namespace = "objectRef.namespace",
              timestamp = "timestamp",
            }
          }
          
          stage.labels {
            values = {
              job = "kubernetes-audit",
              verb = "",
              resource = "",
              namespace = "",
            }
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      loki.write "default" {
        endpoint {
          url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
        }
      }

  # Enable mounting host log directories
  mounts:
    varlog: true
    extra:
      - name: var-log-audit
        mountPath: /var/log/audit
        hostPath:
          path: /var/log/audit
          type: DirectoryOrCreate

  volumes:
    extra:
      - name: var-log-audit
        hostPath:
          path: /var/log/audit
          type: DirectoryOrCreate
