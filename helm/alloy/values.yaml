alloy:
  configMap:
    create: true
    content: |
      discovery.kubernetes "pods" {
        role = "pod"
      }

      discovery.relabel "kubernetes_pods" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          regex = "Pending|Succeeded|Failed|Completed"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
          regex = "false"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          regex = ""
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
      }

      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.kubernetes_pods.output
        forward_to = [loki.process.k8s_logs.receiver]
      }

      // Process Kubernetes pod logs for security events
      loki.process "k8s_logs" {
        // Extract namespace, pod, and container information
        stage.regex {
          expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z)?\\s*(?P<log_level>\\w+)?\\s*(?P<message>.*)"
        }
        
        // Add Kubernetes-specific labels
        stage.labels {
          values = {
            job = "loki.source.kubernetes.pods",
            event_type = "k8s_event",
            log_source = "kubernetes",
          }
        }
        
        // Process security-related events
        stage.match {
          selector = "{job=\"loki.source.kubernetes.pods\"}"
          
          // Mark error events
          stage.match {
            selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(error|fail|exception|panic|fatal)\""
            stage.labels {
              values = {
                level = "error",
                event_type = "k8s_error",
                security_level = "high",
              }
            }
          }
          
          // Mark access denied events
          stage.match {
            selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(denied|unauthorized|forbidden)\""
            stage.labels {
              values = {
                level = "warning",
                event_type = "k8s_access_denied",
                security_level = "medium",
              }
            }
          }
          
          // Mark container restart/crash events
          stage.match {
            selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(restart|crash|killed|oom|exit|terminated)\""
            stage.labels {
              values = {
                level = "warning",
                event_type = "k8s_container_issue",
                security_level = "medium",
              }
            }
          }
          
          // Mark API access patterns
          stage.match {
            selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(get|post|put|delete|patch).*(/api/|/apis/)\""
            stage.regex {
              expression = "(?P<method>GET|POST|PUT|DELETE|PATCH).*(?P<api_path>/api[^\\s]*)"
            }
            stage.labels {
              values = {
                level = "info",
                event_type = "k8s_api_access",
                security_level = "low",
              }
            }
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Real system authentication logs for SIEM dashboard
      local.file_match "system_logs" {
        path_targets = [
          {__path__ = "/var/log/auth.log", job = "system-auth"},
          {__path__ = "/var/log/sudo.log", job = "system-auth"},
          {__path__ = "/var/log/ssh-failures.log", job = "system-auth"},
          {__path__ = "/var/log/ssh-auth.log", job = "system-auth"},
          {__path__ = "/var/log/dpkg.log", job = "package-install"},
          {__path__ = "/var/log/apt/history.log", job = "package-install"},
          {__path__ = "/var/log/package-changes.log", job = "package-install"},
          {__path__ = "/var/log/webhook.log", job = "webhook-receiver"},
          {__path__ = "/var/log/siem-monitor.log", job = "siem-monitor"},
          {__path__ = "/var/log/fail2ban.log", job = "fail2ban"},
          {__path__ = "/var/log/command-audit.log", job = "command-audit"},
          {__path__ = "/var/log/session-audit.log", job = "session-audit"},
        ]
      }

      loki.source.file "system_logs" {
        targets    = local.file_match.system_logs.targets
        forward_to = [loki.process.system_logs.receiver]
      }

      // Real system audit logs for SIEM dashboard  
      local.file_match "audit_logs" {
        path_targets = [
          {__path__ = "/var/log/audit/*.log", job = "system-audit"},
          {__path__ = "/var/log/audit-k8s.log", job = "kubernetes-audit"},
        ]
      }

      loki.source.file "audit_logs" {
        targets    = local.file_match.audit_logs.targets
        forward_to = [loki.process.audit_logs.receiver]
      }

      // Process real system authentication logs
      loki.process "system_logs" {
        // Process system-auth logs (auth.log, sudo.log, ssh-failures.log, ssh-auth.log)
        stage.match {
          selector = "{job=\"system-auth\"}"
          
          // SSH invalid user attempts - HIGH severity
          stage.match {
            selector = "{job=\"system-auth\"} |~ \"(?i)invalid user\""
            stage.regex {
              expression = ".*invalid user (?P<invalid_user>\\S+) from (?P<source_ip>[0-9.]+)"
            }
            stage.labels {
              values = {
                event_type = "ssh_invalid_user",
                level = "warning",
                severity = "HIGH",
                security_level = "high",
              }
            }
          }
          
          // Failed password attempts - MEDIUM severity
          stage.match {
            selector = "{job=\"system-auth\"} |~ \"(?i)failed password\""
            stage.regex {
              expression = ".*Failed password for (?P<failed_user>\\S+) from (?P<source_ip>[0-9.]+)"
            }
            stage.labels {
              values = {
                event_type = "auth_failure",
                level = "warning",
                severity = "MEDIUM",
                security_level = "medium",
              }
            }
          }
          
          // Connection closed by authenticating user - MEDIUM severity
          stage.match {
            selector = "{job=\"system-auth\"} |~ \"(?i)connection closed by authenticating user\""
            stage.regex {
              expression = ".*Connection closed by authenticating user (?P<user>\\S+) (?P<source_ip>[0-9.]+)"
            }
            stage.labels {
              values = {
                event_type = "auth_connection_closed",
                level = "warning",
                severity = "MEDIUM",
                security_level = "medium",
              }
            }
          }
          
          // Successful logins - LOW severity
          stage.match {
            selector = "{job=\"system-auth\"} |~ \"(?i)session opened\""
            stage.regex {
              expression = ".*session opened for user (?P<user>\\S+)"
            }
            stage.labels {
              values = {
                event_type = "successful_login",
                level = "info",
                severity = "LOW",
                security_level = "low",
              }
            }
          }
          
          // Sudo usage from sudo.log - MEDIUM severity
          stage.match {
            selector = "{job=\"system-auth\"} |~ \"sudo:\""
            stage.regex {
              expression = ".*sudo: (?P<sudo_user>\\S+) : TTY=(?P<tty>\\S+) ; PWD=(?P<pwd>\\S+) ; USER=(?P<target_user>\\S+) ; COMMAND=(?P<command>.*)"
            }
            stage.labels {
              values = {
                event_type = "sudo_usage",
                level = "info",
                severity = "MEDIUM",
                security_level = "medium",
              }
            }
          }
          
          // Root login attempts - CRITICAL severity
          stage.match {
            selector = "{job=\"system-auth\"} |~ \"(?i)root.*login\""
            stage.labels {
              values = {
                event_type = "root_login_attempt",
                level = "error",
                severity = "CRITICAL",
                security_level = "critical",
              }
            }
          }
        }
        
        // Process fail2ban logs - HIGH severity
        stage.match {
          selector = "{job=\"fail2ban\"}"
          
          // IP bans
          stage.match {
            selector = "{job=\"fail2ban\"} |~ \"(?i)ban\""
            stage.regex {
              expression = ".*Ban (?P<banned_ip>[0-9.]+)"
            }
            stage.labels {
              values = {
                event_type = "ip_banned",
                level = "warning",
                severity = "HIGH",
                security_level = "high",
              }
            }
          }
          
          // IP unbans
          stage.match {
            selector = "{job=\"fail2ban\"} |~ \"(?i)unban\""
            stage.regex {
              expression = ".*Unban (?P<unbanned_ip>[0-9.]+)"
            }
            stage.labels {
              values = {
                event_type = "ip_unbanned",
                level = "info",
                severity = "LOW",
                security_level = "low",
              }
            }
          }
        }
        
        // Process SIEM monitor logs with JSON parsing
        stage.match {
          selector = "{job=\"siem-monitor\"}"
          stage.json {
            expressions = {
              timestamp = "timestamp",
              severity = "severity",
              event_type = "event_type",
              message = "message",
              source = "source",
            }
          }
          stage.labels {
            values = {
              severity = "",
              security_level = "",
            }
          }
          
          // Map severity to security_level
          stage.match {
            selector = "{severity=\"CRITICAL\"}"
            stage.labels {
              values = {
                security_level = "critical",
                level = "error",
              }
            }
          }
          stage.match {
            selector = "{severity=\"HIGH\"}"
            stage.labels {
              values = {
                security_level = "high",
                level = "warning",
              }
            }
          }
          stage.match {
            selector = "{severity=\"MEDIUM\"}"
            stage.labels {
              values = {
                security_level = "medium",
                level = "warning",
              }
            }
          }
          stage.match {
            selector = "{severity=\"LOW\"}"
            stage.labels {
              values = {
                security_level = "low",
                level = "info",
              }
            }
          }
        }
        
        // Process command audit logs - MEDIUM severity
        stage.match {
          selector = "{job=\"command-audit\"}"
          stage.regex {
            expression = ".*COMMAND=(?P<command>.*)"
          }
          stage.labels {
            values = {
              event_type = "command_execution",
              level = "info",
              severity = "MEDIUM",
              security_level = "medium",
            }
          }
        }
        
        // Process session audit logs - LOW severity
        stage.match {
          selector = "{job=\"session-audit\"}"
          stage.labels {
            values = {
              event_type = "session_event",
              level = "info",
              severity = "LOW",
              security_level = "low",
            }
          }
        }
        
        // Process package installation logs
        stage.match {
          selector = "{job=\"package-install\"}"
          stage.regex {
            expression = ".*(?P<action>install|upgrade|remove).*(?P<package>\\S+)"
          }
          stage.labels {
            values = {
              event_type = "package_change",
              level = "info",
            }
          }
        }
        
        // Process webhook logs
        stage.match {
          selector = "{job=\"webhook-receiver\"}"
          // Try to parse as JSON if possible, but don't fail if it's not JSON
          stage.match {
            selector = "{job=\"webhook-receiver\"} |~ \"^\\\\{\""
            stage.json {
              expressions = {
                event_type = "event_type",
                source = "source", 
                level = "level",
                repository = "repository",
                actor = "actor",
              }
            }
          }
          stage.labels {
            values = {
              event_type = "webhook_event",
              level = "info",
            }
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Process real system audit logs
      loki.process "audit_logs" {
        // Handle traditional audit logs
        stage.match {
          selector = "{job=\"system-audit\"}"
          stage.regex {
            expression = "^type=(?P<audit_type>\\S+) msg=audit\\((?P<audit_timestamp>[^)]+)\\): (?P<audit_message>.*)"
          }
          
          stage.labels {
            values = {
              audit_type = "",
              job = "system-audit",
            }
          }
        }
        
        // Handle Kubernetes audit logs (JSON format)
        stage.match {
          selector = "{job=\"kubernetes-audit\"}"
          stage.json {
            expressions = {
              kind = "kind",
              verb = "verb",
              user = "user.username",
              resource = "objectRef.resource",
              namespace = "objectRef.namespace",
              timestamp = "timestamp",
            }
          }
          
          stage.labels {
            values = {
              job = "kubernetes-audit",
              verb = "",
              resource = "",
              namespace = "",
            }
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      loki.write "default" {
        endpoint {
          url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
        }
      }

  # Enable mounting host log directories
  mounts:
    varlog: true
