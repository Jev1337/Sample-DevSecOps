alloy:
  configMap:
    create: true
    content: |
      //
      // Enhanced SIEM Configuration for Grafana Alloy
      // Includes Kubernetes logs, system logs, SSH monitoring, and webhook collection
      //

      // Enable live debugging for troubleshooting
      livedebugging {
        enabled = true
      }

      // Kubernetes pod discovery (existing functionality)
      discovery.kubernetes "pods" {
        role = "pod"
      }

      discovery.relabel "kubernetes_pods" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          regex = "Pending|Succeeded|Failed|Completed"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
          regex = "false"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          regex = ""
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
      }

      // File discovery for host system logs (mounted from host)
      local.file_match "system_logs" {
        path_targets = [
          {"__path__" = "/host/var/log/auth.log*", "job" = "auth_logs", "log_type" = "authentication", "host" = "kubernetes-host"},
          {"__path__" = "/host/var/log/secure*", "job" = "secure_logs", "log_type" = "authentication", "host" = "kubernetes-host"},
          {"__path__" = "/host/var/log/syslog*", "job" = "system_logs", "log_type" = "system", "host" = "kubernetes-host"},
          {"__path__" = "/host/var/log/kern.log*", "job" = "kernel_logs", "log_type" = "kernel", "host" = "kubernetes-host"},
          {"__path__" = "/host/var/log/audit/audit.log*", "job" = "audit_logs", "log_type" = "audit", "host" = "kubernetes-host"},
        ]
        sync_period = "10s"
      }

      // SSH and authentication log collection
      loki.source.file "auth_logs" {
        targets    = local.file_match.system_logs.targets
        forward_to = [loki.process.security_filter.receiver]
        tail_from_end = true
      }

      // Kubernetes logs (existing)
      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.kubernetes_pods.output
        forward_to = [loki.process.k8s_filter.receiver]
      }

      // Syslog receiver for remote logs
      loki.source.syslog "siem_syslog" {
        listener {
          address  = "0.0.0.0:51400"
          protocol = "tcp"
          labels   = { component = "siem_syslog", protocol = "tcp", log_type = "syslog" }
        }
        listener {
          address  = "0.0.0.0:51401"
          protocol = "udp"
          labels   = { component = "siem_syslog", protocol = "udp", log_type = "syslog" }
        }
        forward_to = [loki.process.syslog_filter.receiver]
      }

      // Webhook receiver for Git events and other external webhooks
      loki.source.webhook "git_webhooks" {
        http {
          listen_address = "0.0.0.0"
          listen_port = 9999
        }
        webhook_config {
          path = "/webhook"
        }
        labels = { component = "webhook", log_type = "git_webhook" }
        forward_to = [loki.process.webhook_filter.receiver]
      }

      // Security-focused log processing
      loki.process "security_filter" {
        // Extract SSH login attempts
        stage.regex {
          expression = "(?P<timestamp>\\w+ \\d+ \\d+:\\d+:\\d+) (?P<hostname>\\S+) (?P<process>\\S+): (?P<message>.*)"
        }
        
        // Label SSH events
        stage.labels {
          values = {
            event_type = "",
          }
        }
        
        stage.match {
          selector = "{job=\"auth_logs\"}"
          
          // SSH successful logins
          stage.regex {
            expression = ".*Accepted (?P<auth_method>\\S+) for (?P<username>\\S+) from (?P<source_ip>\\S+) port (?P<port>\\d+).*"
          }
          stage.labels {
            values = {
              event_type = "ssh_success",
              username = "",
              source_ip = "",
              auth_method = "",
            }
          }
        }
        
        stage.match {
          selector = "{job=\"auth_logs\"}"
          
          // SSH failed logins
          stage.regex {
            expression = ".*Failed (?P<auth_method>\\S+) for (?P<username>\\S+) from (?P<source_ip>\\S+) port (?P<port>\\d+).*"
          }
          stage.labels {
            values = {
              event_type = "ssh_failed",
              username = "",
              source_ip = "",
              auth_method = "",
            }
          }
        }
        
        stage.match {
          selector = "{job=\"auth_logs\"}"
          
          // Invalid users
          stage.regex {
            expression = ".*Invalid user (?P<username>\\S+) from (?P<source_ip>\\S+) port (?P<port>\\d+).*"
          }
          stage.labels {
            values = {
              event_type = "ssh_invalid_user",
              username = "",
              source_ip = "",
            }
          }
        }
        
        // Add security severity levels
        stage.match {
          selector = "{event_type=\"ssh_failed\"}"
          stage.labels {
            values = {
              severity = "warning",
            }
          }
        }
        
        stage.match {
          selector = "{event_type=\"ssh_invalid_user\"}"
          stage.labels {
            values = {
              severity = "critical",
            }
          }
        }
        
        stage.match {
          selector = "{event_type=\"ssh_success\"}"
          stage.labels {
            values = {
              severity = "info",
            }
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Kubernetes log processing
      loki.process "k8s_filter" {
        // Add severity based on log level
        stage.match {
          selector = "{container=\"jenkins\"}"
          stage.regex {
            expression = ".*\\[(?P<log_level>INFO|WARN|ERROR|DEBUG)\\].*"
          }
          stage.labels {
            values = {
              log_level = "",
            }
          }
        }
        
        stage.match {
          selector = "{log_level=\"ERROR\"}"
          stage.labels {
            values = {
              severity = "error",
            }
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Syslog processing
      loki.process "syslog_filter" {
        // Extract syslog priority and facility
        stage.regex {
          expression = "<(?P<priority>\\d+)>(?P<timestamp>\\w+ \\d+ \\d+:\\d+:\\d+) (?P<hostname>\\S+) (?P<tag>[^:]+): (?P<message>.*)"
        }
        
        stage.labels {
          values = {
            hostname = "",
            tag = "",
            priority = "",
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Webhook processing for Git events
      loki.process "webhook_filter" {
        // Extract Git webhook information
        stage.json {
          expressions = {
            repository = "repository.name",
            pusher = "pusher.name",
            ref = "ref",
            commits = "commits",
          }
        }
        
        stage.labels {
          values = {
            repository = "",
            pusher = "",
            event_type = "git_push",
            severity = "info",
          }
        }
        
        // Extract commit information
        stage.match {
          selector = "{event_type=\"git_push\"}"
          stage.template {
            source = "commits"
            template = "{{ range . }}Commit: {{ .id }} by {{ .author.name }} - {{ .message }}{{ end }}"
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Write to Loki
      loki.write "default" {
        endpoint {
          url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
        }
      }
