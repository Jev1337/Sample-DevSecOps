alloy:
  configMap:
    create: true
    content: |
      discovery.kubernetes "pods" {
        role = "pod"
      }

      discovery.relabel "kubernetes_pods" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          regex = "Pending|Succeeded|Failed|Completed"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
          regex = "false"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          regex = ""
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
      }

      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.kubernetes_pods.output
        forward_to = [loki.process.k8s_logs.receiver]
      }

      // Process Kubernetes pod logs for security events
      loki.process "k8s_logs" {
        stage.labels {
          values = {
            job = "kubernetes-pods",
          }
        }
        
        // Only forward error/security-related patterns to reduce stream count
        stage.regex {
          expression = "(?i).*(error|fail|denied|unauthorized|forbidden|exception|panic|fatal).*"
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Real system authentication logs for SIEM dashboard
      local.file_match "system_logs" {
        path_targets = [
          {__path__ = "/var/log/auth.log", job = "system-auth"},
          {__path__ = "/var/log/dpkg.log", job = "package-install"},
          {__path__ = "/var/log/apt/history.log", job = "apt-history"},
        ]
      }

      loki.source.file "system_logs" {
        targets    = local.file_match.system_logs.targets
        forward_to = [loki.process.system_logs.receiver]
      }

      // Real system audit logs for SIEM dashboard  
      local.file_match "audit_logs" {
        path_targets = [
          {__path__ = "/var/log/audit/*.log", job = "system-audit"},
          {__path__ = "/var/log/audit-k8s.log", job = "kubernetes-audit"},
        ]
      }

      loki.source.file "audit_logs" {
        targets    = local.file_match.audit_logs.targets
        forward_to = [loki.process.audit_logs.receiver]
      }

      // Process real system authentication logs
      loki.process "system_logs" {
        // Process auth logs
        stage.match {
          selector = "{job=\"system-auth\"}"
          
          stage.regex {
            expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+\\+\\d{2}:\\d{2}) (?P<hostname>\\S+) (?P<program>\\S+)(\\[(?P<pid>\\d+)\\])?: (?P<message>.*)"
          }
          
          stage.timestamp {
            source = "timestamp"
            format = "2006-01-02T15:04:05.000000+07:00"
          }
          
          stage.labels {
            values = {
              job = "system-auth",
              event_type = "auth_event",
            }
          }
        }
        
        // Extract SSH invalid user attempts
        stage.match {
          selector = "{job=\"system-auth\"}"
          stage.regex {
            expression = "(?i).*invalid user (?P<invalid_user>\\S+) from (?P<source_ip>\\S+).*"
            source = "message"
          }
          
          stage.labels {
            values = {
              event_type = "ssh_invalid_user",
            }
          }
        }
        
        // Extract failed password attempts  
        stage.match {
          selector = "{job=\"system-auth\"}"
          stage.regex {
            expression = "(?i).*authentication failure.*user=(?P<failed_user>\\S+).*rhost=(?P<source_ip>\\S+).*"
            source = "message"
          }
          
          stage.labels {
            values = {
              event_type = "auth_failure", 
            }
          }
        }
        
        // Extract successful logins
        stage.match {
          selector = "{job=\"system-auth\"}"
          stage.regex {
            expression = "(?i).*(session opened|accepted|login).*user (?P<user>\\S+).*"
            source = "message"
          }
          
          stage.labels {
            values = {
              event_type = "successful_login",
            }
          }
        }
        
        // Extract sudo usage
        stage.match {
          selector = "{job=\"system-auth\"}"
          stage.regex {
            expression = "(?i)sudo:\\s+(?P<sudo_user>\\S+)\\s+:\\s+TTY=(?P<tty>\\S+)\\s+;\\s+PWD=(?P<pwd>\\S+)\\s+;\\s+USER=(?P<target_user>\\S+)\\s+;\\s+COMMAND=(?P<command>.*)"
            source = "message"
          }
          
          stage.labels {
            values = {
              event_type = "sudo_usage",
            }
          }
        }
        
        // Extract sudo authentication failures
        stage.match {
          selector = "{job=\"system-auth\"}"
          stage.regex {
            expression = "(?i)sudo:.*(?P<sudo_user>\\S+)\\s+:\\s+(?P<sudo_result>.*authentication failure|incorrect password|user NOT in sudoers).*"
            source = "message"
          }
          
          stage.labels {
            values = {
              event_type = "sudo_failure",
            }
          }
        }
        
        // Process package installation logs
        stage.match {
          selector = "{job=\"package-install\"}"
          
          stage.regex {
            expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}) (?P<action>\\S+) (?P<package>\\S+) (?P<old_version>\\S+) (?P<new_version>\\S+)"
          }
          
          stage.timestamp {
            source = "timestamp"
            format = "2006-01-02 15:04:05"
          }
          
          stage.labels {
            values = {
              job = "package-install",
              event_type = "package_change",
            }
          }
        }
        
        // Process APT history logs
        stage.match {
          selector = "{job=\"apt-history\"}"
          
          stage.regex {
            expression = "(?i)(?P<action>install|upgrade|remove):.*(?P<packages>.*)"
          }
          
          stage.labels {
            values = {
              job = "apt-history",
              event_type = "apt_action",
            }
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      // Process real system audit logs
      loki.process "audit_logs" {
        // Handle traditional audit logs
        stage.match {
          selector = "{job=\"system-audit\"}"
          stage.regex {
            expression = "^type=(?P<audit_type>\\S+) msg=audit\\((?P<audit_timestamp>[^)]+)\\): (?P<audit_message>.*)"
          }
          
          stage.labels {
            values = {
              audit_type = "",
              job = "system-audit",
            }
          }
        }
        
        // Handle Kubernetes audit logs (JSON format)
        stage.match {
          selector = "{job=\"kubernetes-audit\"}"
          stage.json {
            expressions = {
              kind = "kind",
              verb = "verb",
              user = "user.username",
              resource = "objectRef.resource",
              namespace = "objectRef.namespace",
              timestamp = "timestamp",
            }
          }
          
          stage.labels {
            values = {
              job = "kubernetes-audit",
              verb = "",
              resource = "",
              namespace = "",
            }
          }
        }
        
        forward_to = [loki.write.default.receiver]
      }

      loki.write "default" {
        endpoint {
          url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
        }
      }

  # Enable mounting host log directories
  mounts:
    varlog: true
