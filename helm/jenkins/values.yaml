controller:
  image:
    registry: "localhost:32000"
    repository: "jenkins-devsecops"
    tag: "latest"
    pullPolicy: "Always"
  # Disable plugin installation since our custom image already contains plugins
  installPlugins: false
  disableSetupWizard: false

  # Jenkins URL and security configuration
  jenkinsUrlProtocol: "http"
  # Disable setup wizard since we're configuring everything
  jenkinsUriPrefix: "/"
  ingress:
    enabled: true
    hostName: jenkins.local
    ingressClassName: public
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
  servicePort: 8080
  jenkinsUrl: http://jenkins.local/
  # External access service configuration
  serviceType: ClusterIP
  # nodePort: 30080
  # Run as root to allow k8s API access
  podSecurityContext:
    runAsUser: 0
    runAsNonRoot: false
  securityContext:
    runAsUser: 0
    runAsNonRoot: false
    allowPrivilegeEscalation: true
  dnsConfig:
    nameservers:
      - "8.8.8.8"
  sidecars:
    configAutoReload:
      enabled: false
  # Remove Docker-related volumes and mounts
persistence:
  storageClass: "microk8s-hostpath"
  size: "8Gi"

# Authentication and security configuration
serviceAccount:
  create: true
  annotations: {}

# Enable RBAC with cluster-admin permissions
rbac:
  create: true
  readSecrets: true

# Create ClusterRoleBinding for jenkins service account
clusterRoleBinding:
  create: true

# Agent configuration
agent:
  enabled: true
  defaultsProviderTemplate: ""

JCasC:
  # -- Enables default Jenkins configuration via configuration as code plugin
  defaultConfig: true

  # If true, the init container deletes all the plugin config files and Jenkins Config as Code overwrites any existing configuration
  # -- Whether Jenkins Config as Code should overwrite any existing configuration
  overwriteConfiguration: false
  # -- Remote URLs for configuration files.
  configUrls: []
  # - https://acme.org/jenkins.yaml
  # -- List of Jenkins Config as Code scripts
  configScripts: {}
  #  welcome-message: |
  #    jenkins:
  #      systemMessage: Welcome to our CI\CD server. This Jenkins is configured and managed 'as code'.

  # Allows adding to the top-level security JCasC section. For legacy purposes, by default, the chart includes apiToken configurations
  # -- Jenkins Config as Code security-section
  security:
    apiToken:
      creationOfLegacyTokenEnabled: false
      tokenGenerationOnCreationEnabled: false
      usageStatisticsEnabled: true

  # Ignored if securityRealm is defined in controller.JCasC.configScripts
  # -- Jenkins Config as Code Security Realm-section
  securityRealm: |-
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
      - id: "${chart-admin-username}"
        name: "Jenkins Admin"
        password: "${chart-admin-password}"

  # Ignored if authorizationStrategy is defined in controller.JCasC.configScripts
  # -- Jenkins Config as Code Authorization Strategy-section
  authorizationStrategy: |-
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false

  # -- Annotations for the JCasC ConfigMap
  configMapAnnotations: {}


admin:
  # -- Admin username created as a secret if `controller.admin.createSecret` is true
  username: "admin"
  # -- Admin password created as a secret if `controller.admin.createSecret` is true
  # @default -- <random password>
  password:

  # -- The key in the existing admin secret containing the username
  userKey: jenkins-admin-user
  # -- The key in the existing admin secret containing the password
  passwordKey: jenkins-admin-password

  # The default configuration uses this secret to configure an admin user
  # If you don't need that user or use a different security realm, then you can disable it
  # -- Create secret for admin user
  createSecret: true

  # -- The name of an existing secret containing the admin credentials
  existingSecret: ""
# -- Email address for the administrator of the Jenkins instance
jenkinsAdminEmail: