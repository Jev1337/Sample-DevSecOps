name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: flask-k8s-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: |
        cd app
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: app/htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner in SARIF format
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './app'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy for table report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'trivy-results.txt'
        
    - name: Run Trivy for JSON report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        
    - name: Generate HTML report
      run: |
        mkdir -p security/reports
        python3 -c "
        import json
        import datetime
        
        # Read Trivy results
        with open('trivy-results.json', 'r') as f:
            data = json.load(f)
        
        # Generate HTML report
        html = '''
        <!DOCTYPE html>
        <html>
        <head>
            <title>Security Scan Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }
                .critical { color: #d32f2f; font-weight: bold; }
                .high { color: #ff5722; font-weight: bold; }
                .medium { color: #ff9800; font-weight: bold; }
                .low { color: #4caf50; }
                .summary { background: #e3f2fd; padding: 15px; margin: 20px 0; border-radius: 5px; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                th { background-color: #f2f2f2; }
                .no-vulnerabilities { background: #e8f5e8; color: #4caf50; padding: 20px; text-align: center; border-radius: 5px; }
            </style>
        </head>
        <body>
            <div class=\\"header\\">
                <h1>ðŸ”’ Security Scan Report</h1>
                <p><strong>Scan Date:</strong> ''' + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') + '''</p>
                <p><strong>Scanner:</strong> Trivy (Latest)</p>
            </div>
        '''
        
        # Process results
        total_vulns = 0
        critical_count = 0
        high_count = 0
        medium_count = 0
        low_count = 0
        
        if data and 'Results' in data:
            for result in data['Results']:
                if 'Vulnerabilities' in result:
                    for vuln in result['Vulnerabilities']:
                        total_vulns += 1
                        severity = vuln.get('Severity', '').upper()
                        if severity == 'CRITICAL':
                            critical_count += 1
                        elif severity == 'HIGH':
                            high_count += 1
                        elif severity == 'MEDIUM':
                            medium_count += 1
                        elif severity == 'LOW':
                            low_count += 1
        
        # Add summary
        html += f'''
            <div class=\\"summary\\">
                <h2>ðŸ“Š Vulnerability Summary</h2>
                <p><strong>Total Vulnerabilities:</strong> {total_vulns}</p>
                <p><span class=\\"critical\\">Critical:</span> {critical_count}</p>
                <p><span class=\\"high\\">High:</span> {high_count}</p>
                <p><span class=\\"medium\\">Medium:</span> {medium_count}</p>
                <p><span class=\\"low\\">Low:</span> {low_count}</p>
            </div>
        '''
        
        if total_vulns == 0:
            html += '<div class=\\"no-vulnerabilities\\"><h2>âœ… No vulnerabilities found!</h2></div>'
        else:
            html += '<h2>ðŸ“‹ Detailed Results</h2>'
            html += '<table><tr><th>Package</th><th>Vulnerability</th><th>Severity</th><th>Description</th></tr>'
            
            if data and 'Results' in data:
                for result in data['Results']:
                    if 'Vulnerabilities' in result:
                        for vuln in result['Vulnerabilities']:
                            pkg = vuln.get('PkgName', 'Unknown')
                            vuln_id = vuln.get('VulnerabilityID', 'Unknown')
                            severity = vuln.get('Severity', 'Unknown')
                            desc = vuln.get('Description', 'No description available')[:100] + '...'
                            severity_class = severity.lower()
                            html += f'<tr><td>{pkg}</td><td>{vuln_id}</td><td class=\\"{severity_class}\\">{severity}</td><td>{desc}</td></tr>'
            
            html += '</table>'
        
        html += '''
            <div class=\\"footer\\" style=\\"margin-top: 40px; padding: 20px; background: #f5f5f5; border-radius: 5px;\\">
                <p><strong>Recommendations:</strong></p>
                <ul>
                    <li>Update vulnerable packages to latest versions</li>
                    <li>Review security advisories for affected components</li>
                    <li>Implement additional security controls if needed</li>
                    <li>Schedule regular security scans</li>
                </ul>
            </div>
        </body>
        </html>
        '''
        
        with open('security/reports/security-dashboard.html', 'w') as f:
            f.write(html)
        print('Security report generated successfully!')
        "
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          security/reports/
          trivy-results.json
          trivy-results.txt
          trivy-results.sarif
          
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'trivy-results.txt';
          
          if (fs.existsSync(path)) {
            const results = fs.readFileSync(path, 'utf8');
            const comment = `## ðŸ”’ Security Scan Results
            
            \`\`\`
            ${results.substring(0, 2000)}
            \`\`\`
            
            Full report available in build artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  sonarqube-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # SonarQube needs a full clone for analysis
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
          path: app/coverage.xml
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./app
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan, sonarqube-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        file: ./app/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes cluster..."
        echo "This would typically involve:"
        echo "1. Connecting to your cluster"
        echo "2. Applying Kubernetes manifests"
        echo "3. Waiting for rollout to complete"
        echo "4. Running smoke tests"
        
    - name: Generate deployment report
      run: |
        mkdir -p reports
        echo "# Deployment Report" > reports/deployment-report.md
        echo "## Deployment Details" >> reports/deployment-report.md
        echo "- Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest" >> reports/deployment-report.md
        echo "- Deployed at: $(date)" >> reports/deployment-report.md
        echo "- Commit: ${{ github.sha }}" >> reports/deployment-report.md
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: reports/
