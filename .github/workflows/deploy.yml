name: Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: flask-k8s-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Update image tag in manifests
      run: |
        sed -i "s|image: flask-k8s-app:latest|image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}|g" k8s/deployment.yaml
        
    - name: Deploy with kubectl
      run: |
        echo "Deploying to ${{ github.event.inputs.environment }} environment..."
        
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
        
        echo "Waiting for deployment to be ready..."
        kubectl rollout status deployment/flask-app -n flask-app --timeout=300s
        
    - name: Deploy monitoring stack
      run: |
        echo "Deploying monitoring stack..."
        kubectl apply -f monitoring/alloy/alloy-config.yaml
        kubectl apply -f monitoring/loki/loki-config.yaml
        kubectl apply -f monitoring/grafana/grafana-config.yaml
        kubectl apply -f monitoring/grafana/dashboards-configmap.yaml
        
        echo "Waiting for monitoring components..."
        kubectl rollout status deployment/loki -n monitoring --timeout=300s
        kubectl rollout status deployment/grafana -n monitoring --timeout=300s
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        kubectl port-forward service/flask-app-service 8080:80 -n flask-app &
        sleep 5
        
        curl -f http://localhost:8080/health || (echo "Health check failed" && exit 1)
        curl -f http://localhost:8080/api/users || (echo "API test failed" && exit 1)
        
        echo "Smoke tests passed!"
        
    - name: Generate deployment report
      run: |
        mkdir -p reports
        echo "# Deployment Report" > reports/deployment-report.md
        echo "" >> reports/deployment-report.md
        echo "## Deployment Details" >> reports/deployment-report.md
        echo "- **Environment:** ${{ github.event.inputs.environment }}" >> reports/deployment-report.md
        echo "- **Image:** ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}" >> reports/deployment-report.md
        echo "- **Deployed at:** $(date)" >> reports/deployment-report.md
        echo "- **Commit:** ${{ github.sha }}" >> reports/deployment-report.md
        echo "- **Triggered by:** ${{ github.actor }}" >> reports/deployment-report.md
        echo "" >> reports/deployment-report.md
        echo "## Kubernetes Resources" >> reports/deployment-report.md
        echo "\`\`\`bash" >> reports/deployment-report.md
        kubectl get all -n flask-app >> reports/deployment-report.md
        echo "\`\`\`" >> reports/deployment-report.md
        echo "" >> reports/deployment-report.md
        echo "## Service Status" >> reports/deployment-report.md
        echo "\`\`\`bash" >> reports/deployment-report.md        kubectl describe service flask-app-service -n flask-app >> reports/deployment-report.md
        echo "\`\`\`" >> reports/deployment-report.md
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report-${{ github.event.inputs.environment }}
        path: reports/
        
    - name: Notify deployment success
      run: |
        echo "ðŸš€ Deployment to ${{ github.event.inputs.environment }} completed successfully!"
        echo "ðŸ“Š Monitoring dashboards available at:"
        echo "- Grafana: http://grafana.local:3000"
        echo "- Application: http://flask-app.local"
