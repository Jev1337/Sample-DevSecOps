---
# Deploy Loki, Grafana, and Alloy using Helm

- name: Create monitoring namespace
  ansible.builtin.shell: microk8s kubectl get ns monitoring || microk8s kubectl create ns monitoring
  args:
    executable: /bin/bash

- name: Add Grafana Helm repository if not present
  ansible.builtin.shell: |
    microk8s helm3 repo list | grep -q "grafana" || (microk8s helm3 repo add grafana https://grafana.github.io/helm-charts && microk8s helm3 repo update)
  args:
    executable: /bin/bash

- name: Deploy Loki via Helm
  ansible.builtin.shell: |
    microk8s helm3 status loki -n monitoring || microk8s helm3 install loki grafana/loki -n monitoring -f {{ playbook_dir }}/../helm/loki/values.yaml
  args:
    executable: /bin/bash

- name: Deploy Grafana via Helm
  ansible.builtin.shell: |
    microk8s helm3 status grafana -n monitoring || microk8s helm3 install grafana grafana/grafana -n monitoring -f {{ playbook_dir }}/../helm/grafana/values.yaml
  args:
    executable: /bin/bash

- name: Deploy Alloy via Helm
  ansible.builtin.shell: |
    microk8s helm3 status alloy -n monitoring || microk8s helm3 install alloy grafana/alloy -n monitoring -f {{ playbook_dir }}/../helm/alloy/values.yaml
  args:
    executable: /bin/bash

- name: Create enhanced monitoring directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /var/log/siem
    - /var/log/security-monitoring
  become: yes

- name: Install additional monitoring tools
  package:
    name:
      - netstat-nat
      - ss
      - lsof
      - htop
      - iotop
      - tcpdump
    state: present
  become: yes
  ignore_errors: yes

- name: Create security monitoring service
  copy:
    dest: /etc/systemd/system/security-monitor.service
    content: |
      [Unit]
      Description=Security Monitoring Service
      After=network.target
      
      [Service]
      Type=simple
      ExecStart=/usr/local/bin/security-monitor.sh
      Restart=always
      RestartSec=60
      User=root
      
      [Install]
      WantedBy=multi-user.target
    mode: '0644'
    owner: root
    group: root
  become: yes

- name: Create comprehensive security monitoring script
  copy:
    dest: /usr/local/bin/security-monitor.sh
    content: |
      #!/bin/bash
      # Comprehensive security monitoring script
      
      SIEM_LOG="/var/log/siem/security-monitor.log"
      
      while true; do
        # System resource monitoring
        CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
        MEM_USAGE=$(free | grep Mem | awk '{printf("%.1f", $3/$2 * 100.0)}')
        LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}' | cut -d',' -f1 | xargs)
        
        # Check for resource anomalies
        if (( $(echo "$CPU_USAGE > 90" | bc -l) )); then
          echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"resource_monitor\",\"event_type\":\"high_cpu_usage\",\"cpu_usage\":\"$CPU_USAGE%\",\"message\":\"High CPU usage detected\"}" >> "$SIEM_LOG"
        fi
        
        if (( $(echo "$MEM_USAGE > 90" | bc -l) )); then
          echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"resource_monitor\",\"event_type\":\"high_memory_usage\",\"memory_usage\":\"$MEM_USAGE%\",\"message\":\"High memory usage detected\"}" >> "$SIEM_LOG"
        fi
        
        # Check for suspicious processes
        SUSPICIOUS_PROCS=$(ps aux | grep -E "(nc|netcat|ncat|socat|telnet.*[0-9]|wget.*http|curl.*-X)" | grep -v grep | wc -l)
        if [ "$SUSPICIOUS_PROCS" -gt 0 ]; then
          echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"process_monitor\",\"event_type\":\"suspicious_processes\",\"count\":$SUSPICIOUS_PROCS,\"message\":\"Suspicious network processes detected\"}" >> "$SIEM_LOG"
        fi
        
        # Monitor for privilege escalation attempts
        RECENT_SUDO=$(grep "$(date '+%b %d')" /var/log/auth.log 2>/dev/null | grep -c "sudo.*COMMAND" || echo "0")
        if [ "$RECENT_SUDO" -gt 50 ]; then
          echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"info\",\"service\":\"privilege_monitor\",\"event_type\":\"high_sudo_activity\",\"count\":$RECENT_SUDO,\"message\":\"High sudo activity detected today\"}" >> "$SIEM_LOG"
        fi
        
        # Check for new listening ports
        CURRENT_PORTS=$(ss -tuln | grep LISTEN | awk '{print $5}' | cut -d: -f2 | sort -n | tr '\n' ' ')
        EXPECTED_PORTS="22 80 443 3000 3100 5000 8080 9000 10250 16443 32000"
        
        for port in $CURRENT_PORTS; do
          if ! echo "$EXPECTED_PORTS" | grep -q "$port"; then
            echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"info\",\"service\":\"port_monitor\",\"event_type\":\"new_listening_port\",\"port\":$port,\"message\":\"New service listening on port $port\"}" >> "$SIEM_LOG"
          fi
        done
        
        # Monitor Docker containers (if Docker is running)
        if command -v docker &> /dev/null && docker info &> /dev/null; then
          RUNNING_CONTAINERS=$(docker ps --format "table {{.Names}}" | tail -n +2 | wc -l)
          echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"info\",\"service\":\"container_monitor\",\"event_type\":\"container_count\",\"count\":$RUNNING_CONTAINERS,\"message\":\"$RUNNING_CONTAINERS containers currently running\"}" >> "$SIEM_LOG"
        fi
        
        # Monitor Kubernetes pods (if MicroK8s is running)
        if command -v microk8s &> /dev/null; then
          FAILED_PODS=$(microk8s kubectl get pods -A --field-selector=status.phase=Failed 2>/dev/null | wc -l)
          if [ "$FAILED_PODS" -gt 1 ]; then  # Subtract 1 for header
            echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"k8s_monitor\",\"event_type\":\"failed_pods\",\"count\":$((FAILED_PODS-1)),\"message\":\"Failed Kubernetes pods detected\"}" >> "$SIEM_LOG"
          fi
        fi
        
        # Sleep for 5 minutes
        sleep 300
      done
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Enable and start security monitoring service
  systemd:
    name: security-monitor
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

- name: Wait for Loki StatefulSet
  ansible.builtin.shell: microk8s kubectl rollout status statefulset/loki -n monitoring --timeout=5m
  args:
    executable: /bin/bash

- name: Wait for Grafana Deployment
  ansible.builtin.shell: microk8s kubectl rollout status deployment/grafana -n monitoring --timeout=5m
  args:
    executable: /bin/bash

- name: Wait for Alloy DaemonSet
  ansible.builtin.shell: microk8s kubectl rollout status daemonset/alloy -n monitoring --timeout=5m
  args:
    executable: /bin/bash
