---
# Auditd Installation and Configuration
- name: Install auditd package
  package:
    name: auditd
    state: present
  become: yes

- name: Install audispd-plugins for log forwarding
  package:
    name: audispd-plugins
    state: present
  become: yes
  ignore_errors: yes

- name: Create auditd rules directory
  file:
    path: /etc/audit/rules.d
    state: directory
    mode: '0750'
    owner: root
    group: root
  become: yes

- name: Configure auditd main configuration
  blockinfile:
    path: /etc/audit/auditd.conf
    block: |
      # SIEM Audit Configuration
      log_file = /var/log/audit/audit.log
      log_format = RAW
      log_group = adm
      priority_boost = 4
      flush = INCREMENTAL_ASYNC
      freq = 50
      max_log_file = 50
      num_logs = 10
      disp_qos = lossy
      dispatcher = /sbin/audispd
      name_format = HOSTNAME
      max_log_file_action = ROTATE
      space_left = 75
      space_left_action = SYSLOG
      admin_space_left = 50
      admin_space_left_action = SUSPEND
      disk_full_action = SUSPEND
      disk_error_action = SUSPEND
    marker: "# {mark} ANSIBLE MANAGED BLOCK - AUDITD CONFIG"
    create: yes
    backup: yes
  become: yes
  notify: restart auditd

- name: Configure audit rules for file access monitoring
  copy:
    dest: /etc/audit/rules.d/10-file-access.rules
    content: |
      # File Access Monitoring Rules
      # Monitor access to sensitive system files
      -w /etc/passwd -p wa -k user_modification
      -w /etc/group -p wa -k user_modification
      -w /etc/shadow -p wa -k user_modification
      -w /etc/gshadow -p wa -k user_modification
      -w /etc/sudoers -p wa -k privilege_escalation
      -w /etc/sudoers.d/ -p wa -k privilege_escalation
      
      # Monitor SSH configuration
      -w /etc/ssh/sshd_config -p wa -k ssh_config
      -w /root/.ssh -p wa -k ssh_keys
      
      # Monitor system configuration files
      -w /etc/hosts -p wa -k network_config
      -w /etc/hostname -p wa -k network_config
      -w /etc/resolv.conf -p wa -k network_config
      
      # Monitor cron jobs
      -w /etc/cron.allow -p wa -k cron_config
      -w /etc/cron.deny -p wa -k cron_config
      -w /etc/cron.d/ -p wa -k cron_config
      -w /etc/cron.daily/ -p wa -k cron_config
      -w /etc/cron.hourly/ -p wa -k cron_config
      -w /etc/cron.monthly/ -p wa -k cron_config
      -w /etc/cron.weekly/ -p wa -k cron_config
      -w /etc/crontab -p wa -k cron_config
      -w /var/spool/cron/crontabs/ -p wa -k cron_config
      
      # Monitor log files
      -w /var/log/auth.log -p wa -k log_tampering
      -w /var/log/syslog -p wa -k log_tampering
    mode: '0640'
    owner: root
    group: root
  become: yes
  notify: restart auditd

- name: Configure audit rules for user actions monitoring
  copy:
    dest: /etc/audit/rules.d/20-user-actions.rules
    content: |
      # User Actions Monitoring Rules
      # Monitor user authentication events
      -w /var/log/faillog -p wa -k authentication
      -w /var/log/lastlog -p wa -k authentication
      -w /var/log/tallylog -p wa -k authentication
      
      # Monitor sudo usage
      -a always,exit -F arch=b64 -S execve -F euid=0 -F auid>=1000 -F auid!=4294967295 -k privilege_escalation
      -a always,exit -F arch=b32 -S execve -F euid=0 -F auid>=1000 -F auid!=4294967295 -k privilege_escalation
      
      # Monitor user account modifications
      -w /usr/bin/passwd -p x -k user_modification
      -w /usr/sbin/groupadd -p x -k user_modification
      -w /usr/sbin/groupmod -p x -k user_modification
      -w /usr/sbin/addgroup -p x -k user_modification
      -w /usr/sbin/useradd -p x -k user_modification
      -w /usr/sbin/usermod -p x -k user_modification
      -w /usr/sbin/adduser -p x -k user_modification
      
      # Monitor login/logout events
      -w /var/run/utmp -p wa -k session
      -w /var/log/wtmp -p wa -k session
      -w /var/log/btmp -p wa -k session
      
      # Monitor process execution
      -a always,exit -F arch=b64 -S execve -k process_execution
      -a always,exit -F arch=b32 -S execve -k process_execution
    mode: '0640'
    owner: root
    group: root
  become: yes
  notify: restart auditd

- name: Configure audit rules for basic SIEM events
  copy:
    dest: /etc/audit/rules.d/30-siem-events.rules
    content: |
      # Basic SIEM Events Monitoring Rules
      # Monitor network connections
      -a always,exit -F arch=b64 -S socket -F a0=2 -k network_connect
      -a always,exit -F arch=b32 -S socket -F a0=2 -k network_connect
      -a always,exit -F arch=b64 -S connect -k network_connect
      -a always,exit -F arch=b32 -S connect -k network_connect
      
      # Monitor file system mounts
      -a always,exit -F arch=b64 -S mount -k filesystem_mount
      -a always,exit -F arch=b32 -S mount -k filesystem_mount
      
      # Monitor system calls for security events
      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time_change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time_change
      -a always,exit -F arch=b64 -S clock_settime -k time_change
      -a always,exit -F arch=b32 -S clock_settime -k time_change
      -w /etc/localtime -p wa -k time_change
      
      # Monitor kernel module loading
      -w /sbin/insmod -p x -k kernel_modules
      -w /sbin/rmmod -p x -k kernel_modules
      -w /sbin/modprobe -p x -k kernel_modules
      -a always,exit -F arch=b64 -S init_module -S delete_module -k kernel_modules
      -a always,exit -F arch=b32 -S init_module -S delete_module -k kernel_modules
      
      # Monitor system startup scripts
      -w /etc/init.d/ -p wa -k init_scripts
      -w /etc/init/ -p wa -k init_scripts
      -w /etc/systemd/ -p wa -k systemd_config
      
      # Monitor package management
      -w /usr/bin/dpkg -p x -k package_management
      -w /usr/bin/apt -p x -k package_management
      -w /usr/bin/apt-get -p x -k package_management
      -w /usr/bin/aptitude -p x -k package_management
      -w /usr/bin/snap -p x -k package_management
      
      # Make the configuration immutable
      -e 2
    mode: '0640'
    owner: root
    group: root
  become: yes
  notify: restart auditd

- name: Enable and start auditd service
  systemd:
    name: auditd
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

- name: Configure audit log rotation
  copy:
    dest: /etc/logrotate.d/audit
    content: |
      /var/log/audit/audit.log {
          daily
          rotate 30
          compress
          delaycompress
          missingok
          notifempty
          create 0640 root adm
          postrotate
              /sbin/service auditd restart > /dev/null 2>&1 || true
          endrotate
      }
    mode: '0644'
    owner: root
    group: root
  become: yes

- name: Set proper permissions for audit logs
  file:
    path: /var/log/audit
    state: directory
    mode: '0750'
    owner: root
    group: adm
    recurse: yes
  become: yes

- name: Verify auditd is running and collecting events
  shell: |
    auditctl -s
    ausearch -k user_modification --start recent | head -5 || echo "No recent user modification events"
  register: audit_status
  become: yes
  ignore_errors: yes

- name: Display audit status
  debug:
    var: audit_status.stdout_lines
  when: audit_status.stdout_lines is defined

# Fail2Ban Installation and Configuration
- name: Install fail2ban package
  package:
    name: fail2ban
    state: present
  become: yes

- name: Create fail2ban local configuration directory
  file:
    path: /etc/fail2ban/jail.d
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Configure fail2ban jail for SSH protection
  copy:
    dest: /etc/fail2ban/jail.d/sshd.local
    content: |
      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
      findtime = 600
      bantime = 3600
      ignoreip = 127.0.0.1/8 ::1 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
      action = iptables[name=SSH, port=ssh, protocol=tcp]
               sendmail-whois[name=SSH, dest=admin@localhost, sender=fail2ban@localhost]
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart fail2ban

- name: Configure fail2ban jail for web applications
  copy:
    dest: /etc/fail2ban/jail.d/webapp.local
    content: |
      [nginx-http-auth]
      enabled = true
      filter = nginx-http-auth
      logpath = /var/log/nginx/error.log
      maxretry = 5
      findtime = 600
      bantime = 3600
      
      [nginx-noscript]
      enabled = true
      filter = nginx-noscript
      logpath = /var/log/nginx/access.log
      maxretry = 6
      findtime = 600
      bantime = 3600
      
      [nginx-badbots]
      enabled = true
      filter = nginx-badbots
      logpath = /var/log/nginx/access.log
      maxretry = 2
      findtime = 600
      bantime = 86400
      
      [nginx-noproxy]
      enabled = true
      filter = nginx-noproxy
      logpath = /var/log/nginx/access.log
      maxretry = 2
      findtime = 600
      bantime = 86400
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart fail2ban

- name: Configure fail2ban for Kubernetes API server
  copy:
    dest: /etc/fail2ban/jail.d/kubernetes.local
    content: |
      [kubernetes-api]
      enabled = true
      filter = kubernetes-api
      logpath = /var/log/kubernetes/audit.log
      maxretry = 10
      findtime = 300
      bantime = 1800
      
      [microk8s-auth]
      enabled = true
      filter = microk8s-auth
      logpath = /var/snap/microk8s/current/logs/*.log
      maxretry = 5
      findtime = 600
      bantime = 3600
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart fail2ban

- name: Create custom fail2ban filters
  copy:
    dest: /etc/fail2ban/filter.d/kubernetes-api.conf
    content: |
      [Definition]
      failregex = ^.*"verb":".*","user":{"username":".*","uid":".*"},"sourceIPs":\["<HOST>"\].*"code":40[13].*$
                  ^.*"sourceIPs":\["<HOST>"\].*"reason":"Forbidden".*$
                  ^.*"sourceIPs":\["<HOST>"\].*"reason":"Unauthorized".*$
      ignoreregex =
    mode: '0644'
    owner: root
    group: root
  become: yes

- name: Create microk8s auth filter
  copy:
    dest: /etc/fail2ban/filter.d/microk8s-auth.conf
    content: |
      [Definition]
      failregex = ^.*authentication failed.*from <HOST>.*$
                  ^.*invalid user.*from <HOST>.*$
                  ^.*failed login.*<HOST>.*$
      ignoreregex =
    mode: '0644'
    owner: root
    group: root
  become: yes

- name: Enable and start fail2ban service
  systemd:
    name: fail2ban
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

# AIDE (Advanced Intrusion Detection Environment) Installation
- name: Install AIDE package
  package:
    name: aide
    state: present
  become: yes

- name: Configure AIDE for file integrity monitoring
  copy:
    dest: /etc/aide/aide.conf.d/99_local
    content: |
      # Custom AIDE configuration for DevSecOps monitoring
      
      # Monitor critical system files
      /etc p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /boot p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /bin p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /sbin p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /usr/bin p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /usr/sbin p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /lib p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /lib64 p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      
      # Monitor Kubernetes and Docker files
      /var/lib/docker p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /var/snap/microk8s p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      /etc/kubernetes p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      
      # Monitor application directories
      /opt p+i+n+u+g+s+b+m+c+md5+sha1+sha256
      
      # Exclude frequently changing directories
      !/var/log
      !/var/cache
      !/var/tmp
      !/tmp
      !/proc
      !/sys
      !/dev
      !/run
    mode: '0644'
    owner: root
    group: root
  become: yes

- name: Initialize AIDE database
  shell: |
    if [ ! -f /var/lib/aide/aide.db ]; then
      aide --init
      mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
    fi
  become: yes
  ignore_errors: yes

- name: Create AIDE check script
  copy:
    dest: /usr/local/bin/aide-check.sh
    content: |
      #!/bin/bash
      # AIDE integrity check script with SIEM logging
      
      AIDE_LOG="/var/log/aide/aide-check.log"
      SIEM_LOG="/var/log/siem/aide-events.log"
      
      # Create log directories
      mkdir -p /var/log/aide /var/log/siem
      
      # Run AIDE check
      echo "$(date): Starting AIDE integrity check" >> "$AIDE_LOG"
      
      if aide --check > /tmp/aide-output.txt 2>&1; then
        echo "$(date): AIDE check completed - No changes detected" >> "$AIDE_LOG"
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"info\",\"service\":\"aide\",\"event_type\":\"integrity_check\",\"status\":\"clean\",\"message\":\"File integrity check passed\"}" >> "$SIEM_LOG"
      else
        echo "$(date): AIDE check completed - Changes detected!" >> "$AIDE_LOG"
        cat /tmp/aide-output.txt >> "$AIDE_LOG"
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"aide\",\"event_type\":\"integrity_violation\",\"status\":\"changes_detected\",\"message\":\"File integrity changes detected - check $AIDE_LOG for details\"}" >> "$SIEM_LOG"
      fi
      
      # Update database after check
      aide --update
      mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db 2>/dev/null || true
      
      rm -f /tmp/aide-output.txt
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Create AIDE cron job for daily checks
  cron:
    name: "AIDE daily integrity check"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/aide-check.sh"
    user: root
  become: yes

# ClamAV Antivirus Installation
- name: Install ClamAV antivirus
  package:
    name: 
      - clamav
      - clamav-daemon
      - clamav-freshclam
    state: present
  become: yes

- name: Update ClamAV virus definitions
  shell: |
    freshclam
  become: yes
  ignore_errors: yes

- name: Create ClamAV scan script
  copy:
    dest: /usr/local/bin/clamav-scan.sh
    content: |
      #!/bin/bash
      # ClamAV scan script with SIEM logging
      
      SCAN_LOG="/var/log/clamav/scan.log"
      SIEM_LOG="/var/log/siem/clamav-events.log"
      
      # Create log directories
      mkdir -p /var/log/clamav /var/log/siem
      
      echo "$(date): Starting ClamAV system scan" >> "$SCAN_LOG"
      
      # Scan critical directories
      SCAN_DIRS="/home /opt /var/www /tmp /var/tmp"
      
      for dir in $SCAN_DIRS; do
        if [ -d "$dir" ]; then
          echo "$(date): Scanning $dir" >> "$SCAN_LOG"
          
          if clamscan -r --infected --log="$SCAN_LOG" "$dir" 2>&1 | grep -q "Infected files: 0"; then
            echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"info\",\"service\":\"clamav\",\"event_type\":\"virus_scan\",\"directory\":\"$dir\",\"status\":\"clean\",\"message\":\"No threats detected in $dir\"}" >> "$SIEM_LOG"
          else
            echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"critical\",\"service\":\"clamav\",\"event_type\":\"virus_detected\",\"directory\":\"$dir\",\"status\":\"infected\",\"message\":\"Malware detected in $dir - immediate action required\"}" >> "$SIEM_LOG"
          fi
        fi
      done
      
      echo "$(date): ClamAV scan completed" >> "$SCAN_LOG"
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Create ClamAV cron job for daily scans
  cron:
    name: "ClamAV daily virus scan"
    minute: "30"
    hour: "3"
    job: "/usr/local/bin/clamav-scan.sh"
    user: root
  become: yes

# RKHunter (Rootkit Hunter) Installation
- name: Install rkhunter
  package:
    name: rkhunter
    state: present
  become: yes

- name: Configure rkhunter
  lineinfile:
    path: /etc/rkhunter.conf
    regexp: '^#?UPDATE_MIRRORS='
    line: 'UPDATE_MIRRORS=1'
  become: yes

- name: Configure rkhunter web command whitelist
  lineinfile:
    path: /etc/rkhunter.conf
    regexp: '^#?WEB_CMD='
    line: 'WEB_CMD=""'
  become: yes

- name: Create rkhunter scan script
  copy:
    dest: /usr/local/bin/rkhunter-scan.sh
    content: |
      #!/bin/bash
      # RKHunter scan script with SIEM logging
      
      SCAN_LOG="/var/log/rkhunter/scan.log"
      SIEM_LOG="/var/log/siem/rkhunter-events.log"
      
      # Create log directories
      mkdir -p /var/log/rkhunter /var/log/siem
      
      echo "$(date): Starting RKHunter rootkit scan" >> "$SCAN_LOG"
      
      # Update rkhunter database
      rkhunter --update --quiet
      
      # Run scan
      if rkhunter --check --skip-keypress --report-warnings-only --logfile "$SCAN_LOG"; then
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"info\",\"service\":\"rkhunter\",\"event_type\":\"rootkit_scan\",\"status\":\"clean\",\"message\":\"No rootkits or suspicious files detected\"}" >> "$SIEM_LOG"
      else
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"critical\",\"service\":\"rkhunter\",\"event_type\":\"rootkit_detected\",\"status\":\"suspicious\",\"message\":\"Potential rootkit or suspicious activity detected - check $SCAN_LOG for details\"}" >> "$SIEM_LOG"
      fi
      
      echo "$(date): RKHunter scan completed" >> "$SCAN_LOG"
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Create rkhunter cron job for weekly scans
  cron:
    name: "RKHunter weekly rootkit scan"
    minute: "0"
    hour: "4"
    weekday: "0"
    job: "/usr/local/bin/rkhunter-scan.sh"
    user: root
  become: yes

# Lynis Security Auditing Tool
- name: Install lynis security auditing tool
  package:
    name: lynis
    state: present
  become: yes

- name: Create lynis audit script
  copy:
    dest: /usr/local/bin/lynis-audit.sh
    content: |
      #!/bin/bash
      # Lynis security audit script with SIEM logging
      
      AUDIT_LOG="/var/log/lynis/audit.log"
      SIEM_LOG="/var/log/siem/lynis-events.log"
      
      # Create log directories
      mkdir -p /var/log/lynis /var/log/siem
      
      echo "$(date): Starting Lynis security audit" >> "$AUDIT_LOG"
      
      # Run Lynis audit
      lynis audit system --logfile "$AUDIT_LOG" --report-file /var/log/lynis/report.dat
      
      # Parse results and log to SIEM
      WARNINGS=$(grep "warning\[\]" /var/log/lynis/report.dat | wc -l)
      SUGGESTIONS=$(grep "suggestion\[\]" /var/log/lynis/report.dat | wc -l)
      HARDENING_INDEX=$(grep "hardening_index" /var/log/lynis/report.dat | cut -d'=' -f2)
      
      if [ "$WARNINGS" -gt 10 ]; then
        SEVERITY="warning"
      elif [ "$WARNINGS" -gt 5 ]; then
        SEVERITY="info"
      else
        SEVERITY="info"
      fi
      
      echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"$SEVERITY\",\"service\":\"lynis\",\"event_type\":\"security_audit\",\"warnings\":$WARNINGS,\"suggestions\":$SUGGESTIONS,\"hardening_index\":\"$HARDENING_INDEX\",\"message\":\"Security audit completed with $WARNINGS warnings and $SUGGESTIONS suggestions\"}" >> "$SIEM_LOG"
      
      echo "$(date): Lynis audit completed - Warnings: $WARNINGS, Suggestions: $SUGGESTIONS, Hardening Index: $HARDENING_INDEX" >> "$AUDIT_LOG"
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Create lynis cron job for weekly audits
  cron:
    name: "Lynis weekly security audit"
    minute: "0"
    hour: "5"
    weekday: "1"
    job: "/usr/local/bin/lynis-audit.sh"
    user: root
  become: yes

# OSSEC HIDS (Host Intrusion Detection System) - Lightweight agent
- name: Create OSSEC monitoring script (lightweight alternative)
  copy:
    dest: /usr/local/bin/ossec-monitor.sh
    content: |
      #!/bin/bash
      # Lightweight HIDS monitoring script
      
      SIEM_LOG="/var/log/siem/hids-events.log"
      mkdir -p /var/log/siem
      
      # Monitor for suspicious processes
      SUSPICIOUS_PROCS=$(ps aux | grep -E "(nc|netcat|ncat|socat|telnet|ftp|tftp|wget|curl).*-.*[0-9]" | grep -v grep | wc -l)
      
      if [ "$SUSPICIOUS_PROCS" -gt 0 ]; then
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"hids\",\"event_type\":\"suspicious_process\",\"count\":$SUSPICIOUS_PROCS,\"message\":\"Suspicious network processes detected\"}" >> "$SIEM_LOG"
      fi
      
      # Monitor for unusual network connections
      UNUSUAL_CONNECTIONS=$(netstat -tuln | grep -E ":(22|80|443|8080|9000|3000|5000)" | wc -l)
      
      if [ "$UNUSUAL_CONNECTIONS" -gt 20 ]; then
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"info\",\"service\":\"hids\",\"event_type\":\"high_network_activity\",\"connections\":$UNUSUAL_CONNECTIONS,\"message\":\"High number of network connections detected\"}" >> "$SIEM_LOG"
      fi
      
      # Monitor for failed sudo attempts
      FAILED_SUDO=$(grep "$(date '+%b %d')" /var/log/auth.log | grep "sudo.*FAILED" | wc -l)
      
      if [ "$FAILED_SUDO" -gt 3 ]; then
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"hids\",\"event_type\":\"failed_sudo_attempts\",\"count\":$FAILED_SUDO,\"message\":\"Multiple failed sudo attempts detected today\"}" >> "$SIEM_LOG"
      fi
      
      # Monitor disk usage
      DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
      
      if [ "$DISK_USAGE" -gt 90 ]; then
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"critical\",\"service\":\"hids\",\"event_type\":\"disk_space_critical\",\"usage\":\"$DISK_USAGE%\",\"message\":\"Critical disk space usage detected\"}" >> "$SIEM_LOG"
      elif [ "$DISK_USAGE" -gt 80 ]; then
        echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"hids\",\"event_type\":\"disk_space_warning\",\"usage\":\"$DISK_USAGE%\",\"message\":\"High disk space usage detected\"}" >> "$SIEM_LOG"
      fi
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Create HIDS monitoring cron job (every 15 minutes)
  cron:
    name: "HIDS monitoring check"
    minute: "*/15"
    job: "/usr/local/bin/ossec-monitor.sh"
    user: root
  become: yes

# Create handlers for service restarts
- name: Create fail2ban handler
  copy:
    dest: /tmp/fail2ban_handler.yml
    content: |
      ---
      - name: restart fail2ban
        systemd:
          name: fail2ban
          state: restarted
        become: yes
  delegate_to: localhost

# Network monitoring with netstat and ss
- name: Create network monitoring script
  copy:
    dest: /usr/local/bin/network-monitor.sh
    content: |
      #!/bin/bash
      # Network monitoring script for suspicious activities
      
      SIEM_LOG="/var/log/siem/network-events.log"
      mkdir -p /var/log/siem
      
      # Monitor for port scans (multiple connections from same IP)
      SCAN_THRESHOLD=10
      POTENTIAL_SCANS=$(netstat -tuln 2>/dev/null | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | awk -v threshold=$SCAN_THRESHOLD '$1 > threshold {print $2, $1}')
      
      if [ -n "$POTENTIAL_SCANS" ]; then
        while read -r ip count; do
          echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"warning\",\"service\":\"network_monitor\",\"event_type\":\"potential_port_scan\",\"source_ip\":\"$ip\",\"connection_count\":$count,\"message\":\"Potential port scan detected from $ip with $count connections\"}" >> "$SIEM_LOG"
        done <<< "$POTENTIAL_SCANS"
      fi
      
      # Monitor for unusual listening ports
      LISTENING_PORTS=$(ss -tuln | grep LISTEN | awk '{print $5}' | cut -d: -f2 | sort -n)
      EXPECTED_PORTS="22 80 443 3000 5000 8080 9000 10250 16443 32000"
      
      for port in $LISTENING_PORTS; do
        if ! echo "$EXPECTED_PORTS" | grep -q "$port"; then
          echo "{\"timestamp\":\"$(date -Iseconds)\",\"level\":\"info\",\"service\":\"network_monitor\",\"event_type\":\"unexpected_listening_port\",\"port\":$port,\"message\":\"Unexpected service listening on port $port\"}" >> "$SIEM_LOG"
        fi
      done
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Create network monitoring cron job (every 10 minutes)
  cron:
    name: "Network monitoring check"
    minute: "*/10"
    job: "/usr/local/bin/network-monitor.sh"
    user: root
  become: yes

# Kubernetes Audit Configuration
- name: Create SIEM configuration directory
  file:
    path: /etc/kubernetes/siem
    state: directory
    mode: '0755'

- name: Copy Kubernetes audit policy
  copy:
    src: "{{ inventory_dir }}/../siem/configs/audit-policy.yaml"
    dest: /etc/kubernetes/siem/audit-policy.yaml
    mode: '0644'

- name: Enable MicroK8s audit logging
  shell: |
    microk8s kubectl patch -n kube-system daemonset.apps/calico-node --type='merge' -p='{"spec":{"template":{"spec":{"tolerations":[{"operator":"Exists"}]}}}}'
  register: audit_config
  changed_when: false
  ignore_errors: yes

- name: Create audit log directory
  file:
    path: /var/log/kubernetes
    state: directory
    mode: '0755'

- name: Configure MicroK8s API server for audit logging
  blockinfile:
    path: /var/snap/microk8s/current/args/kube-apiserver
    block: |
      --audit-log-path=/var/log/kubernetes/audit.log
      --audit-policy-file=/etc/kubernetes/siem/audit-policy.yaml
      --audit-log-maxage=30
      --audit-log-maxbackup=10
      --audit-log-maxsize=100
    marker: "# {mark} ANSIBLE MANAGED BLOCK - AUDIT LOGGING"
    create: yes
  register: apiserver_config

- name: Restart MicroK8s to apply audit configuration
  shell: |
    microk8s stop
    sleep 10
    microk8s start
    microk8s status --wait-ready
  when: apiserver_config.changed

- name: Verify audit logging is working
  wait_for:
    path: /var/log/kubernetes/audit.log
    timeout: 60
  ignore_errors: yes

- name: Set proper permissions for audit log
  file:
    path: /var/log/kubernetes/audit.log
    mode: '0644'
  ignore_errors: yes
