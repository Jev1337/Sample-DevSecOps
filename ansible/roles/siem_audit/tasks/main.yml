---
# Auditd Installation and Configuration
- name: Install auditd package
  package:
    name: auditd
    state: present
  become: yes

- name: Install audispd-plugins for log forwarding
  package:
    name: audispd-plugins
    state: present
  become: yes
  ignore_errors: yes

- name: Install fail2ban for intrusion prevention
  package:
    name: fail2ban
    state: present
  become: yes

- name: Install rsyslog for enhanced logging
  package:
    name: rsyslog
    state: present
  become: yes

- name: Create auditd rules directory
  file:
    path: /etc/audit/rules.d
    state: directory
    mode: '0750'
    owner: root
    group: root
  become: yes

- name: Configure auditd main configuration
  blockinfile:
    path: /etc/audit/auditd.conf
    block: |
      # SIEM Audit Configuration
      log_file = /var/log/audit/audit.log
      log_format = RAW
      log_group = adm
      priority_boost = 4
      flush = INCREMENTAL_ASYNC
      freq = 50
      max_log_file = 50
      num_logs = 10
      disp_qos = lossy
      dispatcher = /sbin/audispd
      name_format = HOSTNAME
      max_log_file_action = ROTATE
      space_left = 75
      space_left_action = SYSLOG
      admin_space_left = 50
      admin_space_left_action = SUSPEND
      disk_full_action = SUSPEND
      disk_error_action = SUSPEND
    marker: "# {mark} ANSIBLE MANAGED BLOCK - AUDITD CONFIG"
    create: yes
    backup: yes
  become: yes
  notify: restart auditd

- name: Configure audit rules for file access monitoring
  copy:
    dest: /etc/audit/rules.d/10-file-access.rules
    content: |
      # File Access Monitoring Rules
      # Monitor access to sensitive system files
      -w /etc/passwd -p wa -k user_modification
      -w /etc/group -p wa -k user_modification
      -w /etc/shadow -p wa -k user_modification
      -w /etc/gshadow -p wa -k user_modification
      -w /etc/sudoers -p wa -k privilege_escalation
      -w /etc/sudoers.d/ -p wa -k privilege_escalation
      
      # Monitor SSH configuration
      -w /etc/ssh/sshd_config -p wa -k ssh_config
      -w /root/.ssh -p wa -k ssh_keys
      
      # Monitor system configuration files
      -w /etc/hosts -p wa -k network_config
      -w /etc/hostname -p wa -k network_config
      -w /etc/resolv.conf -p wa -k network_config
      
      # Monitor cron jobs
      -w /etc/cron.allow -p wa -k cron_config
      -w /etc/cron.deny -p wa -k cron_config
      -w /etc/cron.d/ -p wa -k cron_config
      -w /etc/cron.daily/ -p wa -k cron_config
      -w /etc/cron.hourly/ -p wa -k cron_config
      -w /etc/cron.monthly/ -p wa -k cron_config
      -w /etc/cron.weekly/ -p wa -k cron_config
      -w /etc/crontab -p wa -k cron_config
      -w /var/spool/cron/crontabs/ -p wa -k cron_config
      
      # Monitor log files
      -w /var/log/auth.log -p wa -k log_tampering
      -w /var/log/syslog -p wa -k log_tampering
    mode: '0640'
    owner: root
    group: root
  become: yes
  notify: restart auditd

- name: Configure audit rules for user actions monitoring
  copy:
    dest: /etc/audit/rules.d/20-user-actions.rules
    content: |
      # User Actions Monitoring Rules
      # Monitor user authentication events
      -w /var/log/faillog -p wa -k authentication
      -w /var/log/lastlog -p wa -k authentication
      -w /var/log/tallylog -p wa -k authentication
      
      # Monitor sudo usage
      -a always,exit -F arch=b64 -S execve -F euid=0 -F auid>=1000 -F auid!=4294967295 -k privilege_escalation
      -a always,exit -F arch=b32 -S execve -F euid=0 -F auid>=1000 -F auid!=4294967295 -k privilege_escalation
      
      # Monitor user account modifications
      -w /usr/bin/passwd -p x -k user_modification
      -w /usr/sbin/groupadd -p x -k user_modification
      -w /usr/sbin/groupmod -p x -k user_modification
      -w /usr/sbin/addgroup -p x -k user_modification
      -w /usr/sbin/useradd -p x -k user_modification
      -w /usr/sbin/usermod -p x -k user_modification
      -w /usr/sbin/adduser -p x -k user_modification
      
      # Monitor login/logout events
      -w /var/run/utmp -p wa -k session
      -w /var/log/wtmp -p wa -k session
      -w /var/log/btmp -p wa -k session
      
      # Monitor process execution
      -a always,exit -F arch=b64 -S execve -k process_execution
      -a always,exit -F arch=b32 -S execve -k process_execution
    mode: '0640'
    owner: root
    group: root
  become: yes
  notify: restart auditd

- name: Configure audit rules for basic SIEM events
  copy:
    dest: /etc/audit/rules.d/30-siem-events.rules
    content: |
      # Basic SIEM Events Monitoring Rules
      # Monitor network connections
      -a always,exit -F arch=b64 -S socket -F a0=2 -k network_connect
      -a always,exit -F arch=b32 -S socket -F a0=2 -k network_connect
      -a always,exit -F arch=b64 -S connect -k network_connect
      -a always,exit -F arch=b32 -S connect -k network_connect
      
      # Monitor file system mounts
      -a always,exit -F arch=b64 -S mount -k filesystem_mount
      -a always,exit -F arch=b32 -S mount -k filesystem_mount
      
      # Monitor system calls for security events
      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time_change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time_change
      -a always,exit -F arch=b64 -S clock_settime -k time_change
      -a always,exit -F arch=b32 -S clock_settime -k time_change
      -w /etc/localtime -p wa -k time_change
      
      # Monitor kernel module loading
      -w /sbin/insmod -p x -k kernel_modules
      -w /sbin/rmmod -p x -k kernel_modules
      -w /sbin/modprobe -p x -k kernel_modules
      -a always,exit -F arch=b64 -S init_module -S delete_module -k kernel_modules
      -a always,exit -F arch=b32 -S init_module -S delete_module -k kernel_modules
      
      # Monitor system startup scripts
      -w /etc/init.d/ -p wa -k init_scripts
      -w /etc/init/ -p wa -k init_scripts
      -w /etc/systemd/ -p wa -k systemd_config
      
      # Monitor package management
      -w /usr/bin/dpkg -p x -k package_management
      -w /usr/bin/apt -p x -k package_management
      -w /usr/bin/apt-get -p x -k package_management
      -w /usr/bin/aptitude -p x -k package_management
      -w /usr/bin/snap -p x -k package_management
      
      # Make the configuration immutable
      -e 2
    mode: '0640'
    owner: root
    group: root
  become: yes
  notify: restart auditd

- name: Enable and start auditd service
  systemd:
    name: auditd
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

- name: Configure audit log rotation
  copy:
    dest: /etc/logrotate.d/audit
    content: |
      /var/log/audit/audit.log {
          daily
          rotate 30
          compress
          delaycompress
          missingok
          notifempty
          create 0640 root adm
          postrotate
              /sbin/service auditd restart > /dev/null 2>&1 || true
          endrotate
      }
    mode: '0644'
    owner: root
    group: root
  become: yes

- name: Set proper permissions for audit logs
  file:
    path: /var/log/audit
    state: directory
    mode: '0750'
    owner: root
    group: adm
    recurse: yes
  become: yes

- name: Verify auditd is running and collecting events
  shell: |
    auditctl -s
    ausearch -k user_modification --start recent | head -5 || echo "No recent user modification events"
  register: audit_status
  become: yes
  ignore_errors: yes

- name: Display audit status
  debug:
    var: audit_status.stdout_lines
  when: audit_status.stdout_lines is defined

# Kubernetes Audit Configuration
- name: Create SIEM configuration directory
  file:
    path: /etc/kubernetes/siem
    state: directory
    mode: '0755'

- name: Copy Kubernetes audit policy
  copy:
    src: "{{ inventory_dir }}/../siem/configs/audit-policy.yaml"
    dest: /etc/kubernetes/siem/audit-policy.yaml
    mode: '0644'

- name: Enable MicroK8s audit logging
  shell: |
    microk8s kubectl patch -n kube-system daemonset.apps/calico-node --type='merge' -p='{"spec":{"template":{"spec":{"tolerations":[{"operator":"Exists"}]}}}}'
  register: audit_config
  changed_when: false
  ignore_errors: yes

- name: Create audit log directory
  file:
    path: /var/log/kubernetes
    state: directory
    mode: '0755'

- name: Configure MicroK8s API server for audit logging
  blockinfile:
    path: /var/snap/microk8s/current/args/kube-apiserver
    block: |
      --audit-log-path=/var/log/kubernetes/audit.log
      --audit-policy-file=/etc/kubernetes/siem/audit-policy.yaml
      --audit-log-maxage=30
      --audit-log-maxbackup=10
      --audit-log-maxsize=100
    marker: "# {mark} ANSIBLE MANAGED BLOCK - AUDIT LOGGING"
    create: yes
  register: apiserver_config

- name: Restart MicroK8s to apply audit configuration
  shell: |
    microk8s stop
    sleep 10
    microk8s start
    microk8s status --wait-ready
  when: apiserver_config.changed

- name: Verify audit logging is working
  wait_for:
    path: /var/log/kubernetes/audit.log
    timeout: 60
  ignore_errors: yes

- name: Set proper permissions for audit log
  file:
    path: /var/log/kubernetes/audit.log
    mode: '0644'
  ignore_errors: yes

# Fail2ban Configuration for Enhanced Security
- name: Configure fail2ban for SSH protection
  copy:
    dest: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      # Ban time in seconds (1 hour)
      bantime = 3600
      # Find time window in seconds (10 minutes)
      findtime = 600
      # Maximum retry attempts
      maxretry = 3
      # Backend for log monitoring
      backend = systemd
      # Action to take when banning
      action = %(action_mwl)s
      # Email settings for notifications
      destemail = admin@localhost
      sender = fail2ban@localhost
      
      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
      bantime = 3600
      findtime = 600
      
      [sshd-ddos]
      enabled = true
      port = ssh
      filter = sshd-ddos
      logpath = /var/log/auth.log
      maxretry = 2
      bantime = 7200
      findtime = 300
      
      [sudo-auth]
      enabled = true
      filter = sudo-auth
      logpath = /var/log/auth.log
      maxretry = 3
      bantime = 1800
      findtime = 600
      
      [kubernetes-api]
      enabled = true
      filter = kubernetes-api
      logpath = /var/log/kubernetes/audit.log
      maxretry = 5
      bantime = 1800
      findtime = 300
      
      [webhook-abuse]
      enabled = true
      filter = webhook-abuse
      logpath = /var/log/webhook.log
      maxretry = 10
      bantime = 900
      findtime = 300
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart fail2ban

- name: Create custom fail2ban filter for sudo authentication failures
  copy:
    dest: /etc/fail2ban/filter.d/sudo-auth.conf
    content: |
      [Definition]
      failregex = ^%(__prefix_line)s.*sudo.*authentication failure.*rhost=<HOST>.*$
                  ^%(__prefix_line)s.*sudo.*COMMAND.*authentication failure.*rhost=<HOST>.*$
                  ^%(__prefix_line)s.*sudo.*incorrect password attempts.*rhost=<HOST>.*$
      ignoreregex =
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart fail2ban

- name: Create custom fail2ban filter for Kubernetes API abuse
  copy:
    dest: /etc/fail2ban/filter.d/kubernetes-api.conf
    content: |
      [Definition]
      failregex = ^.*"sourceIPs":\["<HOST>"\].*"verb":"(POST|PUT|DELETE)".*"code":40[13].*$
                  ^.*"sourceIPs":\["<HOST>"\].*"verb":".*".*"code":429.*$
                  ^.*"sourceIPs":\["<HOST>"\].*"verb":".*".*"reason":"Forbidden".*$
      ignoreregex =
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart fail2ban

- name: Create custom fail2ban filter for webhook abuse
  copy:
    dest: /etc/fail2ban/filter.d/webhook-abuse.conf
    content: |
      [Definition]
      failregex = ^.*"source_ip":"<HOST>".*"event_type":"webhook_abuse".*$
                  ^.*"source_ip":"<HOST>".*"level":"error".*$
                  ^.*<HOST>.*POST.*webhook.*40[0-9].*$
      ignoreregex =
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart fail2ban

- name: Enable and start fail2ban service
  systemd:
    name: fail2ban
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

- name: Configure rsyslog for enhanced SIEM logging
  copy:
    dest: /etc/rsyslog.d/49-siem.conf
    content: |
      # SIEM Enhanced Logging Configuration
      
      # SSH authentication logs with severity levels
      :msg,contains,"sshd" /var/log/ssh-auth.log
      :msg,contains,"Failed password" /var/log/ssh-failures.log
      :msg,contains,"Invalid user" /var/log/ssh-failures.log
      :msg,contains,"Connection closed by authenticating user" /var/log/ssh-failures.log
      
      # Sudo usage logging
      :msg,contains,"sudo:" /var/log/sudo.log
      
      # Fail2ban actions
      :msg,contains,"fail2ban" /var/log/fail2ban.log
      
      # Package management logging
      :msg,contains,"dpkg:" /var/log/package-changes.log
      :msg,contains,"apt:" /var/log/package-changes.log
      
      # System security events
      :msg,contains,"COMMAND=" /var/log/command-audit.log
      :msg,contains,"session opened" /var/log/session-audit.log
      :msg,contains,"session closed" /var/log/session-audit.log
      
      # Stop processing after logging to SIEM files
      & stop
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart rsyslog

- name: Create SIEM log monitoring script
  copy:
    dest: /usr/local/bin/siem-monitor.sh
    content: |
      #!/bin/bash
      # SIEM Real-time Security Monitoring Script
      
      LOG_FILE="/var/log/siem-monitor.log"
      
      # Function to log with severity levels
      log_event() {
          local severity=$1
          local event_type=$2
          local message=$3
          local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          
          echo "{\"timestamp\":\"$timestamp\",\"severity\":\"$severity\",\"event_type\":\"$event_type\",\"message\":\"$message\",\"source\":\"siem-monitor\"}" >> $LOG_FILE
      }
      
      # Monitor for critical security events
      while true; do
          # Check for new fail2ban bans
          if tail -n 1 /var/log/fail2ban.log 2>/dev/null | grep -q "Ban"; then
              BANNED_IP=$(tail -n 1 /var/log/fail2ban.log | grep -oP 'Ban \K[0-9.]+')
              log_event "HIGH" "ip_banned" "IP $BANNED_IP has been banned by fail2ban"
          fi
          
          # Check for multiple failed SSH attempts
          FAILED_COUNT=$(tail -n 100 /var/log/auth.log 2>/dev/null | grep "Failed password" | wc -l)
          if [ "$FAILED_COUNT" -gt 5 ]; then
              log_event "MEDIUM" "multiple_auth_failures" "Multiple SSH authentication failures detected: $FAILED_COUNT attempts"
          fi
          
          # Check for sudo privilege escalation
          if tail -n 10 /var/log/auth.log 2>/dev/null | grep -q "sudo.*COMMAND="; then
              SUDO_USER=$(tail -n 10 /var/log/auth.log | grep "sudo.*COMMAND=" | tail -n 1 | grep -oP 'sudo: \K\w+')
              COMMAND=$(tail -n 10 /var/log/auth.log | grep "sudo.*COMMAND=" | tail -n 1 | grep -oP 'COMMAND=\K.*')
              log_event "MEDIUM" "sudo_usage" "User $SUDO_USER executed: $COMMAND"
          fi
          
          # Check for package installations
          if tail -n 5 /var/log/dpkg.log 2>/dev/null | grep -q "install"; then
              PACKAGE=$(tail -n 5 /var/log/dpkg.log | grep "install" | tail -n 1 | awk '{print $4}')
              log_event "LOW" "package_install" "Package installed: $PACKAGE"
          fi
          
          # Check Kubernetes audit for suspicious activities
          if [ -f /var/log/kubernetes/audit.log ]; then
              if tail -n 10 /var/log/kubernetes/audit.log 2>/dev/null | grep -q '"code":40[13]'; then
                  log_event "MEDIUM" "k8s_unauthorized_access" "Kubernetes unauthorized access attempt detected"
              fi
          fi
          
          sleep 30
      done
    mode: '0755'
    owner: root
    group: root
  become: yes

- name: Create systemd service for SIEM monitoring
  copy:
    dest: /etc/systemd/system/siem-monitor.service
    content: |
      [Unit]
      Description=SIEM Real-time Security Monitoring
      After=network.target
      Wants=network.target
      
      [Service]
      Type=simple
      ExecStart=/usr/local/bin/siem-monitor.sh
      Restart=always
      RestartSec=10
      User=root
      StandardOutput=journal
      StandardError=journal
      
      [Install]
      WantedBy=multi-user.target
    mode: '0644'
    owner: root
    group: root
  become: yes

- name: Enable and start SIEM monitoring service
  systemd:
    name: siem-monitor
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes

- name: Create log rotation for SIEM logs
  copy:
    dest: /etc/logrotate.d/siem-logs
    content: |
      /var/log/ssh-auth.log
      /var/log/ssh-failures.log
      /var/log/sudo.log
      /var/log/fail2ban.log
      /var/log/package-changes.log
      /var/log/command-audit.log
      /var/log/session-audit.log
      /var/log/siem-monitor.log {
          daily
          rotate 30
          compress
          delaycompress
          missingok
          notifempty
          create 0640 root adm
          postrotate
              /bin/systemctl reload rsyslog > /dev/null 2>&1 || true
          endrotate
      }
    mode: '0644'
    owner: root
    group: root
  become: yes
