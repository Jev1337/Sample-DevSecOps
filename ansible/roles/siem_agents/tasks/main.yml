---
# SIEM Security Agents and Configuration Tasks
- name: Update package cache
  ansible.builtin.apt:
    update_cache: yes
  become: true

- name: Install auditd for system auditing
  ansible.builtin.apt:
    name:
      - auditd
      - audispd-plugins
    state: present
  become: true

- name: Configure auditd security rules
  ansible.builtin.copy:
    content: |
      # SIEM Security Audit Rules
      # Monitor authentication events
      -w /etc/passwd -p wa -k user_accounts
      -w /etc/group -p wa -k user_accounts
      -w /etc/shadow -p wa -k user_accounts
      -w /etc/sudoers -p wa -k privilege_escalation

      # Monitor SSH configuration and keys
      -w /etc/ssh/sshd_config -p wa -k ssh_config
      -w /etc/ssh/ -p wa -k ssh_config
      -w /root/.ssh/ -p wa -k ssh_keys
      -w /home/*/.ssh/ -p wa -k ssh_keys

      # Monitor system executables
      -w /usr/bin/wget -p x -k network_tools
      -w /usr/bin/curl -p x -k network_tools
      -w /usr/bin/nc -p x -k network_tools
      -w /usr/bin/nmap -p x -k network_tools

      # Monitor package management
      -w /usr/bin/apt -p x -k package_management
      -w /usr/bin/apt-get -p x -k package_management
      -w /usr/bin/dpkg -p x -k package_management
      -w /usr/bin/yum -p x -k package_management
      -w /usr/bin/rpm -p x -k package_management

      # Monitor sudo usage
      -w /usr/bin/sudo -p x -k privilege_escalation
      -w /etc/sudoers -p wa -k privilege_escalation

      # Monitor critical system files
      -w /etc/crontab -p wa -k system_config
      -w /etc/cron.d/ -p wa -k system_config
      -w /etc/systemd/ -p wa -k system_config
      -w /etc/init.d/ -p wa -k system_config

      # Monitor network configuration
      -w /etc/hosts -p wa -k network_config
      -w /etc/resolv.conf -p wa -k network_config
      -w /etc/network/ -p wa -k network_config

      # Monitor log files
      -w /var/log/auth.log -p wa -k log_tampering
      -w /var/log/secure -p wa -k log_tampering
      -w /var/log/audit/ -p wa -k log_tampering
    dest: /etc/audit/rules.d/siem-security.rules
    mode: '0640'
  become: true

- name: Enable and restart auditd
  ansible.builtin.systemd:
    name: auditd
    enabled: yes
    state: restarted
  become: true

- name: Configure rsyslog for SIEM
  ansible.builtin.copy:
    content: |
      # SIEM Logging Configuration
      # Log authentication events
      auth,authpriv.*          /var/log/auth.log

      # Log sudo commands
      local0.*                 /var/log/sudo.log

      # Log user account modifications
      user.*                   /var/log/user.log

      # Log network events (if available)
      kern.*                   /var/log/kernel.log

      # Log package management events
      local1.*                 /var/log/package.log
    dest: /etc/rsyslog.d/50-siem.conf
    mode: '0644'
  become: true

- name: Restart rsyslog
  ansible.builtin.systemd:
    name: rsyslog
    state: restarted
  become: true

- name: Install fail2ban for intrusion prevention
  ansible.builtin.apt:
    name: fail2ban
    state: present
  become: true

- name: Configure fail2ban for SIEM
  ansible.builtin.copy:
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 3
      backend = systemd

      [sshd]
      enabled = true
      port = ssh
      logpath = /var/log/auth.log
      maxretry = 3
      bantime = 3600

      [sshd-ddos]
      enabled = true
      port = ssh
      logpath = /var/log/auth.log
      maxretry = 6
      bantime = 3600

      [sudo]
      enabled = true
      logpath = /var/log/sudo.log
      maxretry = 3
      bantime = 3600
    dest: /etc/fail2ban/jail.local
    mode: '0644'
  become: true

- name: Enable and start fail2ban
  ansible.builtin.systemd:
    name: fail2ban
    enabled: yes
    state: started
  become: true

- name: Create webhook monitoring directories
  ansible.builtin.file:
    path: /var/log/webhooks
    state: directory
    mode: '0755'
  become: true

- name: Create webhook log file
  ansible.builtin.file:
    path: /var/log/webhook.log
    state: touch
    mode: '0644'
  become: true

- name: Create webhook monitoring script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Webhook monitoring script for SIEM
      WEBHOOK_URL="http://webhook.4.245.1.92.nip.io/webhook"
      LOG_FILE="/var/log/webhook.log"

      # Monitor webhook endpoint
      while true; do
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$WEBHOOK_URL" 2>/dev/null)
          echo "[$TIMESTAMP] Webhook check: $WEBHOOK_URL Response: $RESPONSE" >> "$LOG_FILE"
          sleep 300  # Check every 5 minutes
      done
    dest: /usr/local/bin/webhook-monitor.sh
    mode: '0755'
  become: true

- name: Create webhook monitoring systemd service
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Webhook Monitoring Service for SIEM
      After=network.target

      [Service]
      Type=simple
      User=root
      ExecStart=/usr/local/bin/webhook-monitor.sh
      Restart=always
      RestartSec=30

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/webhook-monitor.service
    mode: '0644'
  become: true

- name: Enable and start webhook monitor service
  ansible.builtin.systemd:
    name: webhook-monitor.service
    enabled: yes
    state: started
    daemon_reload: yes
  become: true

- name: Deploy SIEM host-based log collector DaemonSet
  ansible.builtin.shell: |
    cat <<EOF | microk8s kubectl apply -f -
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: siem-log-collector
      namespace: monitoring
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: siem-log-collector
    rules:
    - apiGroups: [""]
      resources: ["nodes", "pods"]
      verbs: ["get", "list", "watch"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: siem-log-collector
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: siem-log-collector
    subjects:
    - kind: ServiceAccount
      name: siem-log-collector
      namespace: monitoring
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: siem-log-collector
      namespace: monitoring
      labels:
        app: siem-log-collector
    spec:
      selector:
        matchLabels:
          app: siem-log-collector
      template:
        metadata:
          labels:
            app: siem-log-collector
        spec:
          serviceAccountName: siem-log-collector
          hostNetwork: true
          hostPID: true
          containers:
          - name: log-collector
            image: grafana/alloy:latest
            env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            volumeMounts:
            - name: var-log
              mountPath: /var/log
              readOnly: true
            - name: var-lib-docker-containers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: config
              mountPath: /etc/alloy
            securityContext:
              privileged: true
            command:
            - /bin/alloy
            - run
            - /etc/alloy/config.alloy
            - --storage.path=/tmp/alloy
            - --server.http.listen-addr=0.0.0.0:12345
          volumes:
          - name: var-log
            hostPath:
              path: /var/log
          - name: var-lib-docker-containers
            hostPath:
              path: /var/lib/docker/containers
          - name: config
            configMap:
              name: siem-host-config
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: siem-host-config
      namespace: monitoring
    data:
      config.alloy: |
        // Host-based SIEM log collection
        loki.source.file "host_auth_logs" {
          targets = [
            {__path__ = "/var/log/auth.log", job = "host_auth", host = env("HOSTNAME")},
            {__path__ = "/var/log/sudo.log", job = "host_sudo", host = env("HOSTNAME")},
            {__path__ = "/var/log/audit/audit.log", job = "host_audit", host = env("HOSTNAME")},
            {__path__ = "/var/log/webhook.log", job = "host_webhook", host = env("HOSTNAME")},
            {__path__ = "/var/log/fail2ban.log", job = "host_security", host = env("HOSTNAME")},
          ]
          forward_to = [loki.process.host_security.receiver]
        }

        loki.process "host_security" {
          // SSH login detection
          stage.match {
            selector = '{job="host_auth"} |~ "sshd.*Accepted|sshd.*Failed"'
            stage.regex {
              expression = "(?P<timestamp>\\w{3}\\s+\\d{1,2}\\s+\\d{2}:\\d{2}:\\d{2}).*sshd.*?(?P<auth_status>Accepted|Failed)\\s+(?P<auth_method>\\w+)\\s+for\\s+(?P<username>\\w+)\\s+from\\s+(?P<source_ip>[\\d\\.]+)"
            }
            stage.labels {
              values = {
                event_type = "ssh_auth",
                auth_status = "",
                auth_method = "",
                username = "",
                source_ip = "",
              }
            }
          }

          // Sudo usage detection
          stage.match {
            selector = '{job="host_sudo"}'
            stage.regex {
              expression = "(?P<timestamp>\\w{3}\\s+\\d{1,2}\\s+\\d{2}:\\d{2}:\\d{2}).*?USER=(?P<sudo_user>\\w+).*?COMMAND=(?P<command>.*)"
            }
            stage.labels {
              values = {
                event_type = "sudo_usage",
                sudo_user = "",
                command = "",
              }
            }
          }

          // Audit log processing
          stage.match {
            selector = '{job="host_audit"}'
            stage.regex {
              expression = "type=(?P<audit_type>\\w+).*?uid=(?P<uid>\\d+).*?exe=\"(?P<executable>[^\"]+)\""
            }
            stage.labels {
              values = {
                event_type = "audit_event",
                audit_type = "",
                uid = "",
                executable = "",
              }
            }
          }

          // Webhook monitoring
          stage.match {
            selector = '{job="host_webhook"}'
            stage.regex {
              expression = "\\[(?P<timestamp>[^\\]]+)\\]\\s+Webhook check:\\s+(?P<webhook_url>\\S+)\\s+Response:\\s+(?P<response_code>\\d+)"
            }
            stage.labels {
              values = {
                event_type = "webhook_check",
                webhook_url = "",
                response_code = "",
              }
            }
          }

          // Fail2ban security events
          stage.match {
            selector = '{job="host_security"} |~ "fail2ban"'
            stage.regex {
              expression = "fail2ban.*?(?P<action>Ban|Unban)\\s+(?P<ip>[\\d\\.]+)"
            }
            stage.labels {
              values = {
                event_type = "intrusion_prevention",
                action = "",
                ip = "",
              }
            }
          }

          forward_to = [loki.write.default.receiver]
        }

        loki.write "default" {
          endpoint {
            url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
          }
        }
    EOF
  args:
    executable: /bin/bash
