---
- name: Ensure Grafana Helm repository is added
  shell: |
    microk8s helm3 repo add grafana https://grafana.github.io/helm-charts || true
    microk8s helm3 repo update
  ignore_errors: yes

- name: Wait for Grafana service to be ready
  shell: |
    microk8s kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s
  ignore_errors: yes

- name: Get Grafana service port
  shell: |
    microk8s kubectl get svc grafana -n monitoring -o jsonpath='{.spec.ports[0].nodePort}'
  register: grafana_nodeport
  ignore_errors: yes

- name: Create Grafana dashboard directory
  file:
    path: /tmp/grafana-dashboards
    state: directory

- name: Copy Main SIEM dashboard
  copy:
    src: "{{ inventory_dir }}/../monitoring/grafana/dashboards/siem-real-security.json"
    dest: /tmp/grafana-dashboards/siem-real-security.json
  
- name: Copy Flask Security dashboard
  copy:
    src: "{{ inventory_dir }}/../monitoring/grafana/dashboards/security.json"
    dest: /tmp/grafana-dashboards/security.json

- name: Copy Flask General Logs dashboard
  copy:
    src: "{{ inventory_dir }}/../monitoring/grafana/dashboards/app-logs.json"
    dest: /tmp/grafana-dashboards/app-logs.json

- name: Configure SIEM dashboard via kubectl ConfigMap
  shell: |
    microk8s kubectl create configmap siem-dashboard-config \
      --from-file=/tmp/grafana-dashboards/siem-real-security.json \
      -n monitoring --dry-run=client -o yaml | \
    microk8s kubectl label --local -f - grafana_dashboard=1 -o yaml | \
    microk8s kubectl apply -f -
  ignore_errors: yes

- name: Create enhanced SIEM Alloy configuration
  copy:
    dest: /tmp/siem-alloy-config.alloy
    content: |
      // Enhanced SIEM configuration for comprehensive security monitoring
      
      // System authentication logs
      loki.source.file "system_auth" {
        targets = [
          {__path__ = "/var/log/auth.log", job = "system-auth"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // System audit logs
      loki.source.file "system_audit" {
        targets = [
          {__path__ = "/var/log/audit/audit.log", job = "system-audit"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // Fail2ban logs
      loki.source.file "fail2ban_logs" {
        targets = [
          {__path__ = "/var/log/fail2ban.log", job = "fail2ban"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // SIEM security tool logs
      loki.source.file "siem_tools" {
        targets = [
          {__path__ = "/var/log/siem/*.log", job = "siem-tools"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // AIDE integrity monitoring logs
      loki.source.file "aide_logs" {
        targets = [
          {__path__ = "/var/log/aide/*.log", job = "aide-integrity"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // ClamAV antivirus logs
      loki.source.file "clamav_logs" {
        targets = [
          {__path__ = "/var/log/clamav/*.log", job = "clamav-antivirus"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // RKHunter rootkit detection logs
      loki.source.file "rkhunter_logs" {
        targets = [
          {__path__ = "/var/log/rkhunter/*.log", job = "rkhunter-rootkit"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // Lynis security audit logs
      loki.source.file "lynis_logs" {
        targets = [
          {__path__ = "/var/log/lynis/*.log", job = "lynis-audit"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // Package installation logs
      loki.source.file "package_logs" {
        targets = [
          {__path__ = "/var/log/dpkg.log", job = "package-install"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // Kubernetes audit logs
      loki.source.file "k8s_audit" {
        targets = [
          {__path__ = "/var/log/kubernetes/audit.log", job = "k8s-audit"},
        ]
        forward_to = [loki.process.security_logs.receiver]
      }
      
      // Kubernetes pod discovery for API events
      discovery.kubernetes "pods" {
        role = "pod"
      }
      
      discovery.relabel "kubernetes_pods" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_phase"]
          regex = "Pending|Succeeded|Failed|Completed"
          action = "drop"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label = "container"
        }
      }
      
      // Kubernetes pod logs collection
      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.kubernetes_pods.output
        forward_to = [loki.process.k8s_api_logs.receiver]
      }
      
      // Process security logs with enhanced parsing and severity detection
      loki.process "security_logs" {
        forward_to = [loki.write.default.receiver]
        
        // Parse JSON logs from SIEM tools
        stage.json {
          expressions = {
            timestamp = "timestamp",
            level = "level",
            service = "service", 
            event_type = "event_type",
            message = "message",
            source_ip = "source_ip",
            severity = "severity",
            status = "status",
          }
        }
        
        // Add severity levels based on content
        stage.match {
          selector = "{job=~\"system-auth|system-audit|fail2ban|siem-tools\"}"
          
          // Critical severity indicators
          stage.match {
            selector = "{job=~\"system-auth|system-audit|fail2ban|siem-tools\"} |~ \"(?i)(critical|emergency|panic|fatal|virus|malware|rootkit|intrusion|breach|attack)\""
            stage.labels {
              values = {
                severity = "critical",
                alert_level = "high",
              }
            }
          }
          
          // High severity indicators  
          stage.match {
            selector = "{job=~\"system-auth|system-audit|fail2ban|siem-tools\"} |~ \"(?i)(error|failed|denied|unauthorized|forbidden|banned|blocked|suspicious)\""
            stage.labels {
              values = {
                severity = "high",
                alert_level = "medium",
              }
            }
          }
          
          // Medium severity indicators
          stage.match {
            selector = "{job=~\"system-auth|system-audit|fail2ban|siem-tools\"} |~ \"(?i)(warning|warn|unusual|unexpected|anomaly)\""
            stage.labels {
              values = {
                severity = "medium", 
                alert_level = "low",
              }
            }
          }
          
          // Low severity (info)
          stage.match {
            selector = "{job=~\"system-auth|system-audit|fail2ban|siem-tools\"} |~ \"(?i)(info|debug|trace|success|clean)\""
            stage.labels {
              values = {
                severity = "low",
                alert_level = "info",
              }
            }
          }
        }
        
        // Parse fail2ban specific events
        stage.match {
          selector = "{job=\"fail2ban\"}"
          
          stage.regex {
            expression = "\\[(?P<jail>\\w+)\\] (?P<action>Ban|Unban) (?P<ip>[0-9.]+)"
          }
          
          stage.labels {
            values = {
              jail = "{{.jail}}",
              action = "{{.action}}",
              blocked_ip = "{{.ip}}",
              event_type = "ip_blocking",
            }
          }
        }
        
        // Parse SSH authentication events
        stage.match {
          selector = "{job=\"system-auth\"} |~ \"sshd\""
          
          stage.regex {
            expression = "sshd.*: (?P<auth_result>Accepted|Failed) (?P<method>\\w+) for (?P<user>\\w+) from (?P<source_ip>[0-9.]+)"
          }
          
          stage.labels {
            values = {
              auth_result = "{{.auth_result}}",
              auth_method = "{{.method}}",
              username = "{{.user}}",
              source_ip = "{{.source_ip}}",
              event_type = "ssh_auth",
            }
          }
        }
        
        // Parse sudo events
        stage.match {
          selector = "{job=\"system-auth\"} |~ \"sudo\""
          
          stage.regex {
            expression = "sudo:\\s*(?P<user>\\w+)\\s*:.*COMMAND=(?P<command>.*)"
          }
          
          stage.labels {
            values = {
              sudo_user = "{{.user}}",
              sudo_command = "{{.command}}",
              event_type = "privilege_escalation",
            }
          }
        }
      }
      
      // Process Kubernetes API logs
      loki.process "k8s_api_logs" {
        forward_to = [loki.write.default.receiver]
        
        // Add Kubernetes-specific labels
        stage.labels {
          values = {
            job = "loki.source.kubernetes.pods",
            event_type = "k8s_event",
            log_source = "kubernetes",
          }
        }
        
        // Process security-related Kubernetes events
        stage.match {
          selector = "{job=\"loki.source.kubernetes.pods\"}"
          
          // Mark critical Kubernetes events
          stage.match {
            selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(error|fail|exception|panic|fatal|crash|died|killed|oom)\""
            stage.labels {
              values = {
                severity = "high",
                alert_level = "medium",
                k8s_event_type = "error",
              }
            }
          }
          
          // Mark security-related events
          stage.match {
            selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(denied|unauthorized|forbidden|rbac|security|violation)\""
            stage.labels {
              values = {
                severity = "critical",
                alert_level = "high", 
                k8s_event_type = "security",
              }
            }
          }
          
          // Mark resource events
          stage.match {
            selector = "{job=\"loki.source.kubernetes.pods\"} |~ \"(?i)(resource|memory|cpu|disk|limit|quota)\""
            stage.labels {
              values = {
                severity = "medium",
                alert_level = "low",
                k8s_event_type = "resource",
              }
            }
          }
        }
      }
      
      // Write to Loki
      loki.write "default" {
        endpoint {
          url = "http://loki:3100/loki/api/v1/push"
        }
      }

- name: Update Alloy configuration for enhanced SIEM log collection
  shell: |
    microk8s kubectl create configmap -n monitoring alloy-config --from-file=/tmp/siem-alloy-config.alloy --dry-run=client -o yaml | microk8s kubectl apply -f -
  register: alloy_upgrade
  ignore_errors: yes

- name: Restart Alloy to apply new configuration
  shell: |
    microk8s kubectl rollout restart daemonset/alloy -n monitoring
    microk8s kubectl rollout status daemonset/alloy -n monitoring --timeout=120s
  when: alloy_upgrade.changed

- name: Verify SIEM log collection
  shell: |
    # Test if logs are being collected
    microk8s kubectl logs -n monitoring -l app.kubernetes.io/name=alloy --tail=50
  register: alloy_logs
  ignore_errors: yes

- name: Display SIEM setup status
  debug:
    msg: |
      SIEM monitoring configuration applied successfully!
      - Alloy has been updated to collect security logs
      - SIEM dashboard has been imported to Grafana
      - Log collection includes: SSH logs, Kubernetes audit logs, webhook events
