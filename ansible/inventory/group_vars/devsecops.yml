---
# DevSecOps specific configuration variables

# =============================================================================
# DEVSECOPS ENVIRONMENT SETTINGS
# =============================================================================

# Environment type
environment_type: "production"  # Options: production, development, testing

# Deployment mode
deployment_mode: "kubernetes"   # Options: kubernetes, docker-compose

# =============================================================================
# KUBERNETES NAMESPACES
# =============================================================================

namespaces:
  - name: jenkins
    labels:
      app.kubernetes.io/name: jenkins
      app.kubernetes.io/component: ci-cd
  - name: sonarqube
    labels:
      app.kubernetes.io/name: sonarqube
      app.kubernetes.io/component: code-quality
  - name: monitoring
    labels:
      app.kubernetes.io/name: monitoring
      app.kubernetes.io/component: observability
  - name: flask-app
    labels:
      app.kubernetes.io/name: flask-app
      app.kubernetes.io/component: application

# =============================================================================
# SERVICE CONFIGURATION
# =============================================================================

# Jenkins configuration
jenkins:
  namespace: jenkins
  release_name: jenkins
  image:
    registry: "{{ container_registry }}"
    repository: "jenkins-devsecops"
    tag: "latest"
    pull_policy: "Always"
  service:
    type: "ClusterIP"
    port: 8080
  ingress:
    enabled: true
    hostname: "jenkins.{{ domain_suffix }}"
    class: "public"
  security:
    run_as_user: 0
    run_as_non_root: false
    allow_privilege_escalation: true
  storage:
    class: "microk8s-hostpath"
    size: "{{ storage.jenkins_storage_size }}"
  rbac:
    create: true
    cluster_admin: true

# SonarQube configuration
sonarqube:
  namespace: sonarqube
  release_name: sonarqube
  service:
    type: "ClusterIP"
    port: 9000
  ingress:
    enabled: true
    hostname: "sonarqube.{{ domain_suffix }}"
    class: "public"
  postgresql:
    enabled: false  # Use external PostgreSQL
    host: "postgresql.sonarqube.svc.cluster.local"
    port: 5432
    database: "sonarqube"
    username: "sonarqube"
    password: "{{ postgresql_password }}"
  community:
    enabled: true
  persistence:
    enabled: false

# PostgreSQL configuration
postgresql:
  namespace: sonarqube
  release_name: postgresql
  auth:
    username: "sonarqube"
    password: "{{ postgresql_password }}"
    database: "sonarqube"
  storage:
    class: "microk8s-hostpath"
    size: "{{ storage.postgresql_storage_size }}"

# Monitoring stack configuration
monitoring:
  namespace: monitoring
  
  # Loki configuration
  loki:
    release_name: loki
    deployment_mode: "SingleBinary"
    auth_enabled: false
    storage:
      type: "filesystem"
      class: "microk8s-hostpath"
      size: "{{ storage.loki_storage_size }}"
    
  # Grafana configuration
  grafana:
    release_name: grafana
    admin_password: "{{ grafana_admin_password }}"
    storage:
      class: "microk8s-hostpath"
      size: "{{ storage.grafana_storage_size }}"
    ingress:
      enabled: true
      hostname: "grafana.{{ domain_suffix }}"
      class: "public"
    datasources:
      - name: "Loki"
        type: "loki"
        url: "http://loki.monitoring.svc.cluster.local:3100"
        default: true
  
  # Alloy configuration
  alloy:
    release_name: alloy
    config_map:
      create: true

# Flask application configuration
flask_app:
  namespace: flask-app
  name: "flask-app"
  image:
    repository: "{{ container_registry }}/{{ app_name }}"
    tag: "latest"
    pull_policy: "Always"
  replicas: 3
  service:
    type: "ClusterIP"
    port: 80
    target_port: 5000
  ingress:
    enabled: true
    hostname: "flask-app.{{ domain_suffix }}"
    class: "public"
  config:
    port: "5000"
    flask_env: "production"
    python_unbuffered: "1"
    log_level: "INFO"
    app_name: "{{ app_name }}"
    app_version: "{{ app_version }}"
  security_context:
    allow_privilege_escalation: false
    run_as_non_root: true
    run_as_user: 1001
    run_as_group: 1001
    read_only_root_filesystem: false
  health_checks:
    liveness:
      path: "/health"
      port: 5000
      initial_delay: 30
      period: 10
      timeout: 5
      failure_threshold: 3
    readiness:
      path: "/health"
      port: 5000
      initial_delay: 5
      period: 5
      timeout: 3
      failure_threshold: 3
  autoscaling:
    enabled: true
    min_replicas: 2
    max_replicas: 10
    cpu_threshold: 70
    memory_threshold: 80

# =============================================================================
# EXTERNAL ACCESS CONFIGURATION
# =============================================================================

# Azure/Cloud external access
external_access:
  enabled: "{{ features.azure_external_access }}"
  type: "LoadBalancer"  # Options: LoadBalancer, NodePort, Ingress
  
  # LoadBalancer services
  load_balancers:
    - name: "jenkins-loadbalancer"
      namespace: "{{ jenkins.namespace }}"
      port: 8080
      target_port: 8080
      selector:
        app.kubernetes.io/component: jenkins-controller
        app.kubernetes.io/instance: jenkins
    
    - name: "sonarqube-loadbalancer"
      namespace: "{{ sonarqube.namespace }}"
      port: 9000
      target_port: 9000
      selector:
        app: sonarqube
    
    - name: "grafana-loadbalancer"
      namespace: "{{ monitoring.namespace }}"
      port: 3000
      target_port: 3000
      selector:
        app.kubernetes.io/name: grafana
    
    - name: "flask-app-loadbalancer"
      namespace: "{{ flask_app.namespace }}"
      port: 80
      target_port: 5000
      selector:
        app: flask-app

  # External ingress configurations
  external_ingresses:
    - name: "jenkins-external"
      namespace: "{{ jenkins.namespace }}"
      hostname: "jenkins.{external_ip}.nip.io"
      service_name: "jenkins"
      service_port: 8080
    
    - name: "sonarqube-external"
      namespace: "{{ sonarqube.namespace }}"
      hostname: "sonarqube.{external_ip}.nip.io"
      service_name: "sonarqube-sonarqube"
      service_port: 9000
    
    - name: "grafana-external"
      namespace: "{{ monitoring.namespace }}"
      hostname: "grafana.{external_ip}.nip.io"
      service_name: "grafana"
      service_port: 80
    
    - name: "flask-app-external"
      namespace: "{{ flask_app.namespace }}"
      hostname: "app.{external_ip}.nip.io"
      service_name: "flask-app-service"
      service_port: 80

# =============================================================================
# BUILD AND DEPLOYMENT
# =============================================================================

# Custom image builds
custom_images:
  - name: "jenkins-devsecops"
    dockerfile_path: "{{ jenkins_files_path }}/Dockerfile"
    context_path: "{{ jenkins_files_path }}"
    tags:
      - "jenkins-devsecops:latest"
      - "{{ container_registry }}/jenkins-devsecops:latest"
  
  - name: "flask-k8s-app"
    dockerfile_path: "{{ app_source_path }}/Dockerfile"
    context_path: "{{ app_source_path }}"
    build_args:
      BUILD_DATE: "{{ ansible_date_time.iso8601 }}"
      GIT_COMMIT: "{{ ansible_env.COMMIT_SHA | default('unknown') }}"
    tags:
      - "{{ app_name }}:latest"
      - "{{ container_registry }}/{{ app_name }}:latest"

# =============================================================================
# SECURITY SCANNING
# =============================================================================

# Security tools configuration
security_tools:
  trivy:
    config_file: "{{ project_root }}/security/trivy/trivy-config.yaml"
    output_format: "sarif"
    severity: "MEDIUM,HIGH,CRITICAL"
    vuln_type: "os,library"
    security_checks: "vuln,secret,config"
  
  sonarqube:
    project_file: "{{ project_root }}/security/sonarqube/sonar-project.properties"
    project_key: "{{ sonar_project_key }}"
    project_name: "{{ sonar_project_name }}"
    sources: "app"
    tests: "app/tests"

# =============================================================================
# DEVELOPMENT MODE
# =============================================================================

# Docker Compose configuration for development
development:
  compose_file: "{{ project_root }}/docker-compose.yml"
  services:
    - flask-app
    - sonarqube
    - grafana
    - loki
  ports:
    flask_app: 5000
    sonarqube: 9000
    grafana: 3000
    loki: 3100
