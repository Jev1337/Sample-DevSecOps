---
# Azure External Access Configuration Playbook

- name: "🌐 Configure Azure external access"
  hosts: devsecops
  become: yes
  gather_facts: yes

  tasks:
    - name: "🔍 Detect external IP address"
      block:
        - name: "🌐 Auto-detect external IP"
          uri:
            url: "{{ item }}"
            method: GET
            timeout: 10
          register: ip_detection
          failed_when: false
          loop:
            - "https://ifconfig.me"
            - "https://ipinfo.io/ip"
            - "https://icanhazip.com"
          when: external_ip == "auto"

        - name: "✅ Set detected external IP"
          set_fact:
            detected_external_ip: "{{ ip_detection.results | selectattr('status', 'equalto', 200) | map(attribute='content') | first | trim }}"
          when: 
            - external_ip == "auto"
            - ip_detection.results | selectattr('status', 'equalto', 200) | list | length > 0

        - name: "🔧 Use manual external IP"
          set_fact:
            detected_external_ip: "{{ manual_external_ip }}"
          when: external_ip == "manual"

        - name: "🔧 Use provided external IP"
          set_fact:
            detected_external_ip: "{{ external_ip }}"
          when: external_ip not in ["auto", "manual"]

        - name: "📊 Display detected external IP"
          debug:
            msg: "🌐 External IP detected/configured: {{ detected_external_ip }}"

    - name: "🔍 Check if LoadBalancer services already exist"
      command: microk8s kubectl get svc -A -o jsonpath='{.items[?(@.spec.type=="LoadBalancer")].metadata.name}'
      register: existing_loadbalancers
      failed_when: false
      changed_when: false
      become_user: "{{ ansible_user }}"

    - name: "🌐 Create LoadBalancer services"
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace }}"
          spec:
            type: LoadBalancer
            ports:
            - port: "{{ item.port }}"
              targetPort: "{{ item.target_port }}"
              name: http
            selector: "{{ item.selector }}"
      become_user: "{{ ansible_user }}"
      loop: "{{ external_access.load_balancers }}"
      when: 
        - external_access.enabled
        - item.name not in existing_loadbalancers.stdout

    - name: "🌐 Create external Ingress configurations"
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace }}"
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
              nginx.ingress.kubernetes.io/ssl-redirect: "{{ features.ssl_redirect | string | lower }}"
          spec:
            ingressClassName: public
            rules:
            - host: "{{ item.hostname | replace('{external_ip}', detected_external_ip) }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: "{{ item.service_name }}"
                      port:
                        number: "{{ item.service_port }}"
      become_user: "{{ ansible_user }}"
      loop: "{{ external_access.external_ingresses }}"
      when: 
        - external_access.enabled
        - use_nip_io

    - name: "⏳ Wait for LoadBalancer services to get external IPs"
      pause:
        seconds: 30
        prompt: "Waiting for LoadBalancer services to get external IPs..."
      when: external_access.enabled

    - name: "🔍 Get LoadBalancer external IPs"
      command: microk8s kubectl get svc -A -o=jsonpath='{range .items[?(@.spec.type=="LoadBalancer")]}{"NAMESPACE: "}{.metadata.namespace}{"\tSERVICE: "}{.metadata.name}{"\tEXTERNAL-IP: "}{.status.loadBalancer.ingress[0].ip}{"\n"}{end}'
      register: loadbalancer_ips
      become_user: "{{ ansible_user }}"
      when: external_access.enabled

    - name: "📊 Display external access information"
      debug:
        msg:
          - "🌐 EXTERNAL ACCESS CONFIGURATION COMPLETED"
          - "=========================================="
          - "🔗 External IP: {{ detected_external_ip }}"
          - ""
          - "📊 Using nip.io domains (recommended):"
          - "   - Jenkins:   http://jenkins.{{ detected_external_ip }}.nip.io"
          - "   - SonarQube: http://sonarqube.{{ detected_external_ip }}.nip.io"
          - "   - Grafana:   http://grafana.{{ detected_external_ip }}.nip.io"
          - "   - Flask App: http://app.{{ detected_external_ip }}.nip.io"
          - ""
          - "🌐 LoadBalancer Services:"
      when: external_access.enabled

    - name: "📊 Display LoadBalancer IPs"
      debug:
        var: loadbalancer_ips.stdout_lines
      when: 
        - external_access.enabled
        - loadbalancer_ips.stdout is defined

    - name: "🛡️ Display security recommendations"
      debug:
        msg:
          - "🛡️ SECURITY RECOMMENDATIONS:"
          - "=============================="
          - "🔥 Ensure Azure NSG allows inbound traffic on required ports:"
          - "   - HTTP: 80, 443"
          - "   - Jenkins: 8080"
          - "   - SonarQube: 9000"
          - "   - Grafana: 3000"
          - "   - Flask App: 5000"
          - "🔒 Consider setting up SSL/TLS certificates for production"
          - "🔐 Change default passwords for all services"
          - "🛡️ Configure firewall rules to restrict access as needed"
          - "📝 Monitor access logs and set up alerting"
      when: external_access.enabled

    - name: "📋 Create external access documentation"
      template:
        src: external-access-info.md.j2
        dest: "{{ remote_project_path }}/EXTERNAL_ACCESS.md"
        mode: '0644'
      vars:
        external_ip_address: "{{ detected_external_ip }}"
      when: external_access.enabled

    - name: "📝 Log external access configuration completion"
      lineinfile:
        path: "{{ remote_logs_path }}/deployment.log"
        line: "{{ ansible_date_time.iso8601 }} - External access configuration completed for IP {{ detected_external_ip }}"
        create: yes
      when: external_access.enabled

    - name: "💾 Save external IP to fact file"
      copy:
        content: |
          ---
          external_ip: "{{ detected_external_ip }}"
          last_updated: "{{ ansible_date_time.iso8601 }}"
          nip_io_enabled: "{{ use_nip_io }}"
          services:
            jenkins: "http://jenkins.{{ detected_external_ip }}.nip.io"
            sonarqube: "http://sonarqube.{{ detected_external_ip }}.nip.io"
            grafana: "http://grafana.{{ detected_external_ip }}.nip.io"
            flask_app: "http://app.{{ detected_external_ip }}.nip.io"
        dest: "{{ remote_project_path }}/external_access_info.yml"
        mode: '0644'
      when: external_access.enabled
