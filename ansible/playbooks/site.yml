---
# Main DevSecOps Deployment Playbook
# This playbook orchestrates the complete DevSecOps environment deployment

- name: "🚀 DevSecOps Environment Setup"
  hosts: devsecops
  become: yes
  gather_facts: yes
  
  vars:
    ansible_python_interpreter: /usr/bin/python3
    
  pre_tasks:
    - name: "📋 Display deployment information"
      debug:
        msg:
          - "🎯 Target Host: {{ inventory_hostname }}"
          - "🐧 OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "🏗️  Architecture: {{ ansible_architecture }}"
          - "💾 Memory: {{ ansible_memtotal_mb }}MB"
          - "💽 Disk Space: {{ ansible_mounts[0].size_available // 1024 // 1024 // 1024 }}GB available"
          - "🌐 External IP: {{ external_ip }}"
          - "🚀 Environment: {{ environment_type }}"
    
    - name: "⏰ Set deployment start time"
      set_fact:
        deployment_start_time: "{{ ansible_date_time.iso8601 }}"
    
    - name: "📁 Create project directories"
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ remote_project_path }}"
        - "{{ remote_logs_path }}"
        - "/tmp/devsecops"

  tasks:
    # Prerequisites and system setup
    - name: "📝 Install prerequisites"
      include: prerequisites.yml
      tags: 
        - prerequisites
        - base

    # Docker installation
    - name: "🐳 Install and configure Docker"
      include: docker.yml
      tags:
        - docker
        - base

    # MicroK8s setup
    - name: "🔧 Setup MicroK8s"
      include: microk8s.yml
      tags:
        - microk8s
        - kubernetes
        - base

    # Core services deployment
    - name: "🚀 Deploy Jenkins"
      include: jenkins.yml
      tags:
        - jenkins
        - core
        - production
      when: deployment_mode == "kubernetes"

    - name: "🔍 Deploy SonarQube"
      include: sonarqube.yml
      tags:
        - sonarqube
        - core
        - production
      when: deployment_mode == "kubernetes"

    # Monitoring stack
    - name: "📊 Deploy monitoring stack"
      include: monitoring.yml
      tags:
        - monitoring
        - observability
        - production
      when: 
        - deployment_mode == "kubernetes"
        - features.monitoring_enabled

    # Application deployment
    - name: "🐍 Deploy Flask application"
      include: application.yml
      tags:
        - application
        - app
        - production
      when: deployment_mode == "kubernetes"

    # External access configuration
    - name: "🌐 Configure external access"
      include: azure-access.yml
      tags:
        - external-access
        - azure
        - production
      when: 
        - deployment_mode == "kubernetes"
        - features.azure_external_access

    # Development mode (Docker Compose)
    - name: "🧪 Setup development mode"
      include_tasks: development.yml
      tags:
        - development
        - docker-compose
      when: 
        - deployment_mode == "docker-compose" or features.development_mode

  post_tasks:
    - name: "⏰ Calculate deployment time"
      set_fact:
        deployment_end_time: "{{ ansible_date_time.iso8601 }}"
        deployment_duration: "{{ (ansible_date_time.epoch | int) - (deployment_start_time | to_datetime('%Y-%m-%dT%H:%M:%SZ') | int) }}"

    - name: "✅ Display deployment summary"
      debug:
        msg:
          - "🎉 DevSecOps deployment completed successfully!"
          - "⏱️  Total deployment time: {{ deployment_duration }} seconds"
          - "🌐 Services are ready for access"
          - "📋 Check the access information below:"

    - name: "🔗 Display access information"
      include_tasks: tasks/display_access_info.yml
      tags: always

  handlers:
    - name: restart docker
      service:
        name: docker
        state: restarted

    - name: restart microk8s
      command: microk8s stop && microk8s start

# Error handling playbook
- name: "🆘 Handle deployment errors"
  hosts: devsecops
  gather_facts: no
  tasks:
    - name: "📝 Log deployment failure"
      lineinfile:
        path: "{{ remote_logs_path }}/deployment.log"
        line: "{{ ansible_date_time.iso8601 }} - DEPLOYMENT FAILED: {{ ansible_failed_result.msg | default('Unknown error') }}"
        create: yes
      when: ansible_failed_result is defined
      
    - name: "🔍 Display troubleshooting information"
      debug:
        msg:
          - "❌ Deployment failed. Check the logs for details:"
          - "📂 Log location: {{ remote_logs_path }}/deployment.log"
          - "🔧 Troubleshooting guide: docs/troubleshooting.md"
          - "📞 Support: Check README.md for support information"
      when: ansible_failed_result is defined
