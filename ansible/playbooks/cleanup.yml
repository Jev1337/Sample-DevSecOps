---
# Cleanup Operations Playbook

- name: "🧹 Cleanup DevSecOps environment"
  hosts: devsecops
  become: yes
  gather_facts: yes

  tasks:
    - name: "📝 Display cleanup options"
      debug:
        msg:
          - "🧹 Available cleanup operations:"
          - "  - Tag: jenkins (Remove Jenkins)"
          - "  - Tag: sonarqube (Remove SonarQube and PostgreSQL)"
          - "  - Tag: monitoring (Remove monitoring stack)"
          - "  - Tag: application (Remove Flask application)"
          - "  - Tag: external-access (Remove external access configs)"
          - "  - Tag: all (Complete cleanup)"

    - name: "🗑️ Cleanup Jenkins"
      block:
        - name: "❌ Uninstall Jenkins Helm release"
          kubernetes.core.helm:
            name: "{{ jenkins.release_name }}"
            namespace: "{{ jenkins.namespace }}"
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"
          environment:
            PATH: "/snap/bin:{{ ansible_env.PATH }}"
          failed_when: false

        - name: "🗑️ Delete Jenkins namespace"
          kubernetes.core.k8s:
            name: "{{ jenkins.namespace }}"
            api_version: v1
            kind: Namespace
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"

        - name: "🗑️ Remove Jenkins Docker images"
          docker_image:
            name: "{{ item }}"
            state: absent
          loop:
            - "jenkins-devsecops:latest"
            - "{{ container_registry }}/jenkins-devsecops:latest"
          failed_when: false

        - name: "📝 Log Jenkins cleanup"
          lineinfile:
            path: "{{ remote_logs_path }}/deployment.log"
            line: "{{ ansible_date_time.iso8601 }} - Jenkins cleanup completed"
            create: yes

      tags: 
        - jenkins
        - all

    - name: "🗑️ Cleanup SonarQube and PostgreSQL"
      block:
        - name: "❌ Uninstall SonarQube Helm release"
          kubernetes.core.helm:
            name: "{{ sonarqube.release_name }}"
            namespace: "{{ sonarqube.namespace }}"
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"
          environment:
            PATH: "/snap/bin:{{ ansible_env.PATH }}"
          failed_when: false

        - name: "❌ Uninstall PostgreSQL Helm release"
          kubernetes.core.helm:
            name: "{{ postgresql.release_name }}"
            namespace: "{{ sonarqube.namespace }}"
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"
          environment:
            PATH: "/snap/bin:{{ ansible_env.PATH }}"
          failed_when: false

        - name: "🗑️ Delete SonarQube PVCs"
          command: microk8s kubectl delete pvc -n {{ sonarqube.namespace }} --all --ignore-not-found
          become_user: "{{ ansible_user }}"
          failed_when: false

        - name: "🗑️ Delete SonarQube namespace"
          kubernetes.core.k8s:
            name: "{{ sonarqube.namespace }}"
            api_version: v1
            kind: Namespace
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"

        - name: "📝 Log SonarQube cleanup"
          lineinfile:
            path: "{{ remote_logs_path }}/deployment.log"
            line: "{{ ansible_date_time.iso8601 }} - SonarQube and PostgreSQL cleanup completed"
            create: yes

      tags: 
        - sonarqube
        - all

    - name: "🗑️ Cleanup monitoring stack"
      block:
        - name: "❌ Uninstall Loki Helm release"
          kubernetes.core.helm:
            name: "{{ monitoring.loki.release_name }}"
            namespace: "{{ monitoring.namespace }}"
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"
          environment:
            PATH: "/snap/bin:{{ ansible_env.PATH }}"
          failed_when: false

        - name: "❌ Uninstall Grafana Helm release"
          kubernetes.core.helm:
            name: "{{ monitoring.grafana.release_name }}"
            namespace: "{{ monitoring.namespace }}"
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"
          environment:
            PATH: "/snap/bin:{{ ansible_env.PATH }}"
          failed_when: false

        - name: "❌ Uninstall Alloy Helm release"
          kubernetes.core.helm:
            name: "{{ monitoring.alloy.release_name }}"
            namespace: "{{ monitoring.namespace }}"
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"
          environment:
            PATH: "/snap/bin:{{ ansible_env.PATH }}"
          failed_when: false

        - name: "🗑️ Delete monitoring namespace"
          kubernetes.core.k8s:
            name: "{{ monitoring.namespace }}"
            api_version: v1
            kind: Namespace
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"

        - name: "📝 Log monitoring cleanup"
          lineinfile:
            path: "{{ remote_logs_path }}/deployment.log"
            line: "{{ ansible_date_time.iso8601 }} - Monitoring stack cleanup completed"
            create: yes

      tags: 
        - monitoring
        - all

    - name: "🗑️ Cleanup Flask application"
      block:
        - name: "🗑️ Delete Flask application resources"
          command: microk8s kubectl delete -f {{ remote_project_path }}/k8s/ --ignore-not-found
          become_user: "{{ ansible_user }}"
          failed_when: false

        - name: "🗑️ Delete Flask app namespace"
          kubernetes.core.k8s:
            name: "{{ flask_app.namespace }}"
            api_version: v1
            kind: Namespace
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"

        - name: "🔄 Revert deployment image reference"
          replace:
            path: "{{ remote_project_path }}/k8s/deployment.yaml"
            regexp: 'image: {{ container_registry }}/{{ app_name }}:latest'
            replace: 'image: flask-k8s-app:latest'
          failed_when: false

        - name: "🗑️ Remove Flask Docker images"
          docker_image:
            name: "{{ item }}"
            state: absent
          loop:
            - "{{ app_name }}:latest"
            - "{{ container_registry }}/{{ app_name }}:latest"
          failed_when: false

        - name: "📝 Log application cleanup"
          lineinfile:
            path: "{{ remote_logs_path }}/deployment.log"
            line: "{{ ansible_date_time.iso8601 }} - Flask application cleanup completed"
            create: yes

      tags: 
        - application
        - all

    - name: "🗑️ Cleanup external access configurations"
      block:
        - name: "🗑️ Remove LoadBalancer services"
          kubernetes.core.k8s:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace }}"
            api_version: v1
            kind: Service
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"
          loop: "{{ external_access.load_balancers }}"
          failed_when: false

        - name: "🗑️ Remove external Ingress configurations"
          kubernetes.core.k8s:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace }}"
            api_version: networking.k8s.io/v1
            kind: Ingress
            state: absent
            kubeconfig: "{{ kubeconfig_path }}"
          become_user: "{{ ansible_user }}"
          loop: "{{ external_access.external_ingresses }}"
          failed_when: false

        - name: "📝 Log external access cleanup"
          lineinfile:
            path: "{{ remote_logs_path }}/deployment.log"
            line: "{{ ansible_date_time.iso8601 }} - External access cleanup completed"
            create: yes

      tags: 
        - external-access
        - all

    - name: "🗑️ Cleanup Helm repositories"
      block:
        - name: "🗑️ Remove Helm repositories"
          command: microk8s helm3 repo remove {{ item.name }}
          become_user: "{{ ansible_user }}"
          loop: "{{ helm_repos }}"
          failed_when: false

        - name: "📝 Log Helm repositories cleanup"
          lineinfile:
            path: "{{ remote_logs_path }}/deployment.log"
            line: "{{ ansible_date_time.iso8601 }} - Helm repositories cleanup completed"
            create: yes

      tags: 
        - repositories
        - all

    - name: "🗑️ Development environment cleanup"
      block:
        - name: "🗑️ Stop Docker Compose services"
          docker_compose:
            project_src: "{{ project_root }}"
            state: absent
            remove_volumes: yes
          failed_when: false

        - name: "📝 Log development cleanup"
          lineinfile:
            path: "{{ remote_logs_path }}/deployment.log"
            line: "{{ ansible_date_time.iso8601 }} - Development environment cleanup completed"
            create: yes

      tags: 
        - development
        - docker-compose
        - all

    - name: "🗑️ Final cleanup"
      block:
        - name: "🗑️ Remove project directories"
          file:
            path: "{{ remote_project_path }}"
            state: absent
          when: "'all' in ansible_run_tags"

        - name: "🗑️ Clean up unused Docker images"
          command: docker image prune -f
          failed_when: false

        - name: "🗑️ Clean up unused Docker volumes"
          command: docker volume prune -f
          failed_when: false

        - name: "📊 Display cleanup summary"
          debug:
            msg:
              - "✅ Cleanup operations completed"
              - "🗑️ Removed components based on selected tags"
              - "📝 Check logs at {{ remote_logs_path }}/deployment.log"
              - "🔍 Verify cleanup with: microk8s kubectl get all -A"

        - name: "📝 Log final cleanup"
          lineinfile:
            path: "{{ remote_logs_path }}/deployment.log"
            line: "{{ ansible_date_time.iso8601 }} - Cleanup operations completed for tags: {{ ansible_run_tags | join(', ') }}"
            create: yes

      tags: 
        - all
        - always

    - name: "⚠️ Display post-cleanup information"
      debug:
        msg:
          - "🧹 Cleanup completed for: {{ ansible_run_tags | join(', ') }}"
          - "🔍 To verify cleanup: microk8s kubectl get all -A"
          - "📊 To check remaining resources: microk8s kubectl get pvc -A"
          - "🗂️ Log files preserved at: {{ remote_logs_path }}/"
          - "🔄 To redeploy: ansible-playbook -i inventory/hosts.yml playbooks/site.yml"
      tags: always
