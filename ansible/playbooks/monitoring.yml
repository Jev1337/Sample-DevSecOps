---
# Monitoring Stack Deployment Playbook (Grafana, Loki, Alloy)

- name: "📊 Deploy monitoring and observability stack"
  hosts: devsecops
  become: yes
  gather_facts: yes

  tasks:
    - name: "🔍 Check if Loki is already deployed"
      command: microk8s kubectl get pods -n {{ monitoring.namespace }} -l app.kubernetes.io/name=loki
      register: loki_check
      failed_when: false
      changed_when: false
      become_user: "{{ ansible_user }}"

    - name: "🔍 Check if Grafana is already deployed"
      command: microk8s kubectl get pods -n {{ monitoring.namespace }} -l app.kubernetes.io/name=grafana
      register: grafana_check
      failed_when: false
      changed_when: false
      become_user: "{{ ansible_user }}"

    - name: "🔍 Check if Alloy is already deployed"
      command: microk8s kubectl get pods -n {{ monitoring.namespace }} -l app.kubernetes.io/name=alloy
      register: alloy_check
      failed_when: false
      changed_when: false
      become_user: "{{ ansible_user }}"

    - name: "📊 Create Loki Helm values template"
      template:
        src: loki-values.yml.j2
        dest: "{{ remote_project_path }}/loki-values.yml"
        mode: '0644'

    - name: "📚 Deploy Loki via Helm"
      kubernetes.core.helm:
        name: "{{ monitoring.loki.release_name }}"
        chart_ref: grafana/loki
        namespace: "{{ monitoring.namespace }}"
        values_files:
          - "{{ remote_project_path }}/loki-values.yml"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: "{{ timeouts.helm_install }}"
        kubeconfig: "{{ kubeconfig_path }}"
      become_user: "{{ ansible_user }}"
      environment:
        PATH: "/snap/bin:{{ ansible_env.PATH }}"
      when: "'loki-0' not in loki_check.stdout"

    - name: "⏳ Wait for Loki to be ready"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ monitoring.namespace }}"
        label_selectors:
          - "app.kubernetes.io/name=loki"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: "{{ timeouts.pod_ready | int * 60 }}"
        kubeconfig: "{{ kubeconfig_path }}"
      become_user: "{{ ansible_user }}"

    - name: "📊 Create Grafana Helm values template"
      template:
        src: grafana-values.yml.j2
        dest: "{{ remote_project_path }}/grafana-values.yml"
        mode: '0644'

    - name: "📈 Deploy Grafana via Helm"
      kubernetes.core.helm:
        name: "{{ monitoring.grafana.release_name }}"
        chart_ref: grafana/grafana
        namespace: "{{ monitoring.namespace }}"
        values_files:
          - "{{ remote_project_path }}/grafana-values.yml"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: "{{ timeouts.helm_install }}"
        kubeconfig: "{{ kubeconfig_path }}"
      become_user: "{{ ansible_user }}"
      environment:
        PATH: "/snap/bin:{{ ansible_env.PATH }}"
      when: "'grafana-' not in grafana_check.stdout"

    - name: "⏳ Wait for Grafana to be ready"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ monitoring.namespace }}"
        label_selectors:
          - "app.kubernetes.io/name=grafana"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: "{{ timeouts.pod_ready | int * 60 }}"
        kubeconfig: "{{ kubeconfig_path }}"
      become_user: "{{ ansible_user }}"

    - name: "📊 Create Alloy Helm values template"
      template:
        src: alloy-values.yml.j2
        dest: "{{ remote_project_path }}/alloy-values.yml"
        mode: '0644'

    - name: "🔄 Deploy Alloy via Helm"
      kubernetes.core.helm:
        name: "{{ monitoring.alloy.release_name }}"
        chart_ref: grafana/alloy
        namespace: "{{ monitoring.namespace }}"
        values_files:
          - "{{ remote_project_path }}/alloy-values.yml"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: "{{ timeouts.helm_install }}"
        kubeconfig: "{{ kubeconfig_path }}"
      become_user: "{{ ansible_user }}"
      environment:
        PATH: "/snap/bin:{{ ansible_env.PATH }}"
      when: "'alloy-' not in alloy_check.stdout"

    - name: "⏳ Wait for Alloy to be ready"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ monitoring.namespace }}"
        label_selectors:
          - "app.kubernetes.io/name=alloy"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: "{{ timeouts.pod_ready | int * 60 }}"
        kubeconfig: "{{ kubeconfig_path }}"
      become_user: "{{ ansible_user }}"

    - name: "📈 Check Grafana rollout status"
      command: microk8s kubectl rollout status deployment/grafana -n {{ monitoring.namespace }} --timeout={{ timeouts.rollout_status }}
      become_user: "{{ ansible_user }}"

    - name: "📚 Check Loki rollout status"
      command: microk8s kubectl rollout status statefulset/loki -n {{ monitoring.namespace }} --timeout={{ timeouts.rollout_status }}
      become_user: "{{ ansible_user }}"

    - name: "🔄 Check Alloy rollout status"
      command: microk8s kubectl rollout status daemonset/alloy -n {{ monitoring.namespace }} --timeout={{ timeouts.rollout_status }}
      become_user: "{{ ansible_user }}"

    - name: "📊 Copy Grafana dashboards"
      copy:
        src: "{{ project_root }}/monitoring/grafana/dashboards/"
        dest: "{{ remote_project_path }}/dashboards/"
        mode: '0644'

    - name: "📊 Display monitoring stack deployment information"
      debug:
        msg:
          - "✅ Monitoring stack deployed successfully"
          - "📈 Grafana URL: http://grafana.{{ domain_suffix }}"
          - "👤 Grafana Username: admin"
          - "🔑 Grafana Password: {{ grafana_admin_password }}"
          - "📚 Loki endpoint: http://loki.{{ monitoring.namespace }}.svc.cluster.local:3100"
          - "🔄 Alloy: Log collection agent running as DaemonSet"
          - "📋 Namespace: {{ monitoring.namespace }}"

    - name: "📊 Display datasource configuration"
      debug:
        msg:
          - "🔗 Configured datasources:"
          - "  - Loki: http://loki.monitoring.svc.cluster.local:3100"
          - "📊 Available dashboards:"
          - "  - Application logs dashboard"
          - "  - Security monitoring dashboard"

    - name: "📝 Log monitoring stack deployment completion"
      lineinfile:
        path: "{{ remote_logs_path }}/deployment.log"
        line: "{{ ansible_date_time.iso8601 }} - Monitoring stack deployment completed in namespace {{ monitoring.namespace }}"
        create: yes

    - name: "📋 Display monitoring configuration notes"
      debug:
        msg:
          - "🔧 Monitoring stack configuration:"
          - "  1. Access Grafana web interface"
          - "  2. Verify Loki datasource connection"
          - "  3. Import custom dashboards from /monitoring/grafana/dashboards/"
          - "  4. Configure alerting rules and notifications"
          - "  5. Set up log retention policies"
