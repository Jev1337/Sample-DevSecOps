// Enhanced Alloy Configuration for SIEM Integration
// Collects Kubernetes pods, audit logs, system logs, and security events

// Kubernetes Pod Discovery
discovery.kubernetes "pods" {
  role = "pod"
}

// Enhanced Pod Log Relabeling with Security Context
discovery.relabel "kubernetes_pods" {
  targets = discovery.kubernetes.pods.targets
  
  // Drop non-running pods
  rule {
    source_labels = ["__meta_kubernetes_pod_phase"]
    regex = "Pending|Succeeded|Failed|Completed"
    action = "drop"
  }
  
  // Skip pods without scrape annotation
  rule {
    source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
    regex = "false"
    action = "drop"
  }
  
  // Drop empty container names
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    regex = ""
    action = "drop"
  }
  
  // Add pod metadata
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label = "pod"
  }
  
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    target_label = "namespace"
  }
  
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    target_label = "container"
  }
  
  // Add node information for security context
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    target_label = "node"
  }
  
  // Add security labels
  rule {
    source_labels = ["__meta_kubernetes_pod_label_security_context"]
    target_label = "security_context"
  }
  
  // Mark critical namespaces
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    regex = "kube-system|kube-public|kube-node-lease|monitoring|jenkins|sonarqube"
    target_label = "critical_namespace"
    replacement = "true"
  }
}

// Host System Log Discovery for Security Events
discovery.file "system_logs" {
  path_targets = [
    {
      __path__ = "/var/log/auth.log*",
      log_type = "auth",
      service = "system",
      job = "auth-logs",
    },
    {
      __path__ = "/var/log/syslog*",
      log_type = "syslog",
      service = "system", 
      job = "syslog",
    },
    {
      __path__ = "/var/log/audit/audit.log*",
      log_type = "audit",
      service = "auditd",
      job = "audit-logs",
    },
    {
      __path__ = "/var/log/kern.log*",
      log_type = "kernel",
      service = "kernel",
      job = "kernel-logs",
    },
    {
      __path__ = "/var/log/fail2ban.log*",
      log_type = "security",
      service = "fail2ban",
      job = "fail2ban-logs",
    },
    {
      __path__ = "/var/log/apt/history.log*",
      log_type = "package",
      service = "apt",
      job = "apt-logs",
    },
    {
      __path__ = "/var/log/dpkg.log*",
      log_type = "package",
      service = "dpkg",
      job = "dpkg-logs",
    },
  ]
}

// Kubernetes Events Discovery for Audit Trail
discovery.kubernetes "events" {
  role = "event"
}

// Enhanced Kubernetes Pod Logs Collection
loki.source.kubernetes "pods" {
  targets    = discovery.relabel.kubernetes_pods.output
  forward_to = [loki.process.security_enrichment.receiver]
}

// System Logs Collection with Security Processing
loki.source.file "system_security_logs" {
  targets    = discovery.file.system_logs.targets
  forward_to = [loki.process.system_log_enrichment.receiver]
}

// Kubernetes Events Collection
loki.source.kubernetes "k8s_events" {
  targets    = discovery.kubernetes.events.targets
  forward_to = [loki.process.k8s_events_enrichment.receiver]
}

// Security Log Processing Pipeline
loki.process "security_enrichment" {
  forward_to = [loki.write.default.receiver]
  
  // Parse JSON logs from applications
  stage.json {
    expressions = {
      level = "level",
      message = "message",
      timestamp = "timestamp",
      user_id = "user_id",
      ip_address = "ip_address",
      user_agent = "user_agent",
      method = "method",
      path = "path",
      status_code = "status_code",
      response_time = "response_time",
    }
  }
  
  // Extract security-relevant patterns
  stage.regex {
    expression = "(?i)(failed login|authentication failed|unauthorized|access denied|permission denied|invalid credentials|brute force|injection|xss|csrf|sql injection)"
    source = "message"
  }
  
  // Add security event classification
  stage.labels {
    values = {
      security_event = "true",
    }
  }
  
  // Detect failed authentication attempts
  stage.match {
    selector = "{} |~ \"(?i)(failed|denied|invalid|unauthorized)\""
    
    stage.labels {
      values = {
        security_level = "high",
        event_type = "auth_failure",
      }
    }
  }
  
  // Detect suspicious HTTP status codes
  stage.match {
    selector = "{status_code=~\"4[0-9][0-9]|5[0-9][0-9]\"}"
    
    stage.labels {
      values = {
        security_level = "medium",
        event_type = "http_error",
      }
    }
  }
  
  // Detect potential attacks
  stage.match {
    selector = "{} |~ \"(?i)(attack|injection|xss|csrf|malware|virus|trojan)\""
    
    stage.labels {
      values = {
        security_level = "critical",
        event_type = "security_threat",
      }
    }
  }
}

// System Log Processing for Security Events
loki.process "system_log_enrichment" {
  forward_to = [loki.write.default.receiver]
  
  // Parse SSH authentication logs
  stage.regex {
    expression = "(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\S+)\\s+(?P<process>\\S+)\\[(?P<pid>\\d+)\\]:\\s*(?P<message>.*)"
    source = ""
  }
  
  // Extract SSH login attempts
  stage.match {
    selector = "{process=\"sshd\"}"
    
    stage.regex {
      expression = "(?P<auth_result>Failed|Accepted)\\s+(?P<auth_method>\\S+)\\s+for\\s+(?P<username>\\S+)\\s+from\\s+(?P<source_ip>[0-9.]+)\\s+port\\s+(?P<port>\\d+)"
      source = "message"
    }
    
    stage.labels {
      values = {
        log_type = "ssh_auth",
        auth_result = "{{.auth_result}}",
        username = "{{.username}}",
        source_ip = "{{.source_ip}}",
      }
    }
  }
  
  // Parse audit log entries
  stage.match {
    selector = "{log_type=\"audit\"}"
    
    stage.regex {
      expression = "type=(?P<audit_type>\\S+)\\s+msg=audit\\((?P<audit_timestamp>[^)]+)\\):\\s*(?P<audit_message>.*)"
      source = ""
    }
    
    stage.labels {
      values = {
        audit_type = "{{.audit_type}}",
        event_type = "system_audit",
      }
    }
  }
  
  // Parse fail2ban logs
  stage.match {
    selector = "{service=\"fail2ban\"}"
    
    stage.regex {
      expression = "(?P<f2b_timestamp>[^\\]]+)\\]\\s+(?P<f2b_level>\\S+)\\s+\\[(?P<f2b_jail>\\S+)\\]\\s+(?P<f2b_action>\\S+)\\s+(?P<f2b_ip>[0-9.]+)"
      source = ""
    }
    
    stage.labels {
      values = {
        fail2ban_jail = "{{.f2b_jail}}",
        fail2ban_action = "{{.f2b_action}}",
        blocked_ip = "{{.f2b_ip}}",
        event_type = "intrusion_prevention",
      }
    }
  }
  
  // Parse package management logs
  stage.match {
    selector = "{log_type=\"package\"}"
    
    stage.regex {
      expression = "(?P<pkg_timestamp>[^\\]]+)\\s+(?P<pkg_action>install|remove|upgrade|configure)\\s+(?P<package_name>\\S+)\\s*(?P<package_version>\\S+)?"
      source = ""
    }
    
    stage.labels {
      values = {
        package_action = "{{.pkg_action}}",
        package_name = "{{.package_name}}",
        event_type = "package_management",
      }
    }
  }
}

// Kubernetes Events Processing
loki.process "k8s_events_enrichment" {
  forward_to = [loki.write.default.receiver]
  
  stage.labels {
    values = {
      log_type = "k8s_event",
      event_type = "k8s_audit",
    }
  }
  
  // Extract event metadata
  stage.json {
    expressions = {
      event_type = "type",
      reason = "reason",
      object_kind = "involvedObject.kind",
      object_name = "involvedObject.name",
      object_namespace = "involvedObject.namespace",
      event_message = "message",
    }
  }
  
  // Flag security-relevant events
  stage.match {
    selector = "{reason=~\"Failed|Error|Killing|Unhealthy|BackOff\"}"
    
    stage.labels {
      values = {
        security_level = "medium",
        event_category = "k8s_security",
      }
    }
  }
}

// Loki Write Configuration
loki.write "default" {
  endpoint {
    url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
  }
  
  external_labels = {
    cluster = "devsecops-cluster",
    environment = "production",
    siem_enabled = "true",
  }
}
