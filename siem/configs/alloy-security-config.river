discovery.kubernetes "pods" {
  role = "pod"
}

discovery.relabel "kubernetes_pods" {
  targets = discovery.kubernetes.pods.targets
  rule {
    source_labels = ["__meta_kubernetes_pod_phase"]
    regex = "Pending|Succeeded|Failed|Completed"
    action = "drop"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
    regex = "false"
    action = "drop"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    regex = ""
    action = "drop"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label = "pod"
  }
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    target_label = "namespace"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    target_label = "container"
  }
}

# Standard Kubernetes pod logs
loki.source.kubernetes "pods" {
  targets    = discovery.relabel.kubernetes_pods.output
  forward_to = [loki.process.security_label.receiver]
}

# Host system logs collection
loki.source.file "auth_logs" {
  targets = [
    { "__path__" = "/var/log/auth.log", "job" = "auth_log" },
    { "__path__" = "/var/log/secure", "job" = "secure_log" }
  ]
  forward_to = [loki.process.security_label.receiver]
}

loki.source.file "audit_logs" {
  targets = [
    { "__path__" = "/var/log/audit/audit.log", "job" = "audit_log" },
    { "__path__" = "/var/log/audit-forwarded.log", "job" = "audit_forwarded" }
  ]
  forward_to = [loki.process.security_label.receiver]
}

loki.source.file "system_logs" {
  targets = [
    { "__path__" = "/var/log/syslog", "job" = "syslog" },
    { "__path__" = "/var/log/kern.log", "job" = "kernel_log" }
  ]
  forward_to = [loki.process.security_label.receiver]
}

loki.source.file "package_logs" {
  targets = [
    { "__path__" = "/var/log/apt/history.log", "job" = "apt_history" },
    { "__path__" = "/var/log/apt/term.log", "job" = "apt_term" },
    { "__path__" = "/var/log/dpkg.log", "job" = "dpkg_log" }
  ]
  forward_to = [loki.process.security_label.receiver]
}

loki.source.file "ssh_logs" {
  targets = [
    { "__path__" = "/var/log/ssh-failures.log", "job" = "ssh_failures" }
  ]
  forward_to = [loki.process.security_label.receiver]
}

loki.source.file "fail2ban_logs" {
  targets = [
    { "__path__" = "/var/log/fail2ban.log", "job" = "fail2ban" }
  ]
  forward_to = [loki.process.security_label.receiver]
}

loki.source.file "webhook_logs" {
  targets = [
    { "__path__" = "/var/log/webhook.log", "job" = "webhook" }
  ]
  forward_to = [loki.process.security_label.receiver]
}

loki.source.file "sudo_logs" {
  targets = [
    { "__path__" = "/var/log/sudo.log", "job" = "sudo" }
  ]
  forward_to = [loki.process.security_label.receiver]
}

# Process to add security labels based on log content
loki.process "security_label" {
  forward_to = [loki.write.default.receiver]
  
  stage.match {
    selector = "{job=~\"auth_log|secure_log|ssh_failures\"}"
    stage.labels {
      values = {
        log_type = "auth",
        security_event = "login_activity"
      }
    }
  }
  
  stage.match {
    selector = "{job=~\"audit_log|audit_forwarded\"}"
    stage.labels {
      values = {
        log_type = "audit",
        security_event = "system_audit"
      }
    }
  }
  
  stage.match {
    selector = "{job=~\"apt_history|apt_term|dpkg_log\"}"
    stage.labels {
      values = {
        log_type = "package",
        security_event = "software_changes"
      }
    }
  }
  
  stage.match {
    selector = "{job=\"webhook\"}"
    stage.labels {
      values = {
        log_type = "webhook",
        security_event = "git_activity"
      }
    }
  }
  
  stage.match {
    selector = "{job=\"fail2ban\"}"
    stage.labels {
      values = {
        log_type = "intrusion",
        security_event = "blocked_attempt"
      }
    }
  }
  
  stage.match {
    selector = "{namespace=\"flask-app\"}"
    stage.labels {
      values = {
        app_type = "flask",
        monitor_type = "application"
      }
    }
  }
  
  stage.match {
    selector = "{namespace=\"jenkins\"}"
    stage.labels {
      values = {
        app_type = "jenkins",
        monitor_type = "ci_cd"
      }
    }
  }
  
  stage.match {
    selector = "{namespace=\"sonarqube\"}"
    stage.labels {
      values = {
        app_type = "sonarqube",
        monitor_type = "code_quality"
      }
    }
  }
  
  # Detect security events in logs
  stage.match {
    selector = "{__error__=\"\"}"
    
    # Authentication failures
    stage.regex {
      expression = "(?i)(failed password|authentication failure|invalid user|Failed login|Unable to negotiate with|user not allowed|Permission denied)"
      source     = "message"
      
      labels = {
        security_event_type = "authentication_failure"
      }
    }
    
    # Privilege escalation
    stage.regex {
      expression = "(?i)(sudo|su |USER=root|COMMAND=|NOPASSWD|wheel|sudoers)"
      source     = "message"
      
      labels = {
        security_event_type = "privilege_escalation"
      }
    }
    
    # System file modifications
    stage.regex {
      expression = "(?i)(opened for write|modified|changed|removed|deleted|renamed) .*(passwd|shadow|group|sudoers|\/etc\/|sshd_config|authorized_keys)"
      source     = "message"
      
      labels = {
        security_event_type = "system_file_change"
      }
    }
    
    # Package activity
    stage.regex {
      expression = "(?i)(installed|upgraded|removed|update) .*(package|deb)"
      source     = "message"
      
      labels = {
        security_event_type = "package_event"
      }
    }
    
    # SSH activity
    stage.regex {
      expression = "(?i)(ssh|sshd|connection from|connection closed|session opened|session closed)"
      source     = "message"
      
      labels = {
        security_event_type = "ssh_activity"
      }
    }
    
    # Webhook activity
    stage.regex {
      expression = "(?i)(webhook|payload|github|gitlab|git|pull|push|commit)"
      source     = "message"
      
      labels = {
        security_event_type = "git_webhook"
      }
    }
  }
}

loki.write "default" {
  endpoint {
    url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
  }
}
