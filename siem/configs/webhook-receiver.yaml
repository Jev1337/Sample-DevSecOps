apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-receiver
  namespace: monitoring
  labels:
    app: webhook-receiver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook-receiver
  template:
    metadata:
      labels:
        app: webhook-receiver
    spec:
      automountServiceAccountToken: false
      containers:
      - name: webhook-receiver
        image: nginxinc/nginx-unprivileged:1.25-alpine
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 100Mi
          limits:
            memory: 256Mi
            ephemeral-storage: 200Mi
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: webhook-logs
          mountPath: /var/log/nginx
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 101
          runAsGroup: 101
          readOnlyRootFilesystem: true
      volumes:
      - name: nginx-config
        configMap:
          name: webhook-nginx-config
      - name: webhook-logs
        emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: webhook-nginx-config
  namespace: monitoring
data:
  default.conf: |
    server {
      listen 8080;
      access_log /var/log/nginx/webhook_access.log;
      error_log /var/log/nginx/webhook_error.log;
      
      location /webhook {
        add_header Content-Type application/json;
        
        # Log the request body
        set $request_body_file /var/log/nginx/webhook_request_$request_id;
        client_body_in_file_only on;
        client_body_temp_path /var/log/nginx/;
        
        # Simple security validation (should be enhanced with proper token validation)
        if ($http_x_github_event = "") {
          return 403 '{"status":"error", "message":"Missing GitHub Event header"}';
        }
        
        # Log webhook details
        if ($http_x_github_event) {
          access_log /var/log/nginx/webhook.log '{"timestamp":"$time_iso8601", "client":"$remote_addr", "method":"$request_method", "uri":"$request_uri", "github_event":"$http_x_github_event", "delivery_id":"$http_x_github_delivery", "user_agent":"$http_user_agent", "request_id":"$request_id"}';
        }
        
        # Return success response
        return 200 '{"status":"success", "message":"Webhook received", "event":"$http_x_github_event", "request_id":"$request_id"}';
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-receiver-service
  namespace: monitoring
spec:
  selector:
    app: webhook-receiver
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webhook-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: public
  rules:
  - host: webhook.EXTERNAL_IP.nip.io  # Will be updated with actual IP in setup
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webhook-receiver-service
            port:
              number: 80
